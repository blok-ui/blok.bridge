package blok.bridge.asset;

import hotdish.node.Build;
import hotdish.*;
import hotdish.node.*;
import haxe.Template;

using kit.Hash;
using StringTools;
using haxe.io.Path;

typedef ClientAppOptions = {
	public final ?output:String;
	public final ?sources:Array<String>;
	public final ?main:String;
	public final ?dependencies:Array<String>;
	public final ?flags:BuildFlags;
};

class ClientAppAsset implements Asset {
	final main:String;
	final options:ClientAppOptions;
	final islands:IslandContext;

	public function new(options, islands) {
		this.options = options;
		this.islands = islands;
		this.main = 'Bridge_' + (options?.main ?? 'Islands').hash();
	}

	public function getIdentifier():Null<String> {
		return '__blok.island.island-asset';
	}

	public function process(app:AppContext):Task<Nothing> {
		return outputMainFile(app).next(_ -> buildJsFile(app));
	}

	function buildJsFile(app:AppContext) {
		var sources:Array<String> = options.sources ?? ['src'];
		var dependencies = options.dependencies ?? [];
		var flags = options.flags ?? new BuildFlags();

		if (!dependencies.contains('blok.bridge')) {
			dependencies.push('blok.bridge');
		}

		flags.set('blok.client', true);
		flags.set('js-es', '6');
		flags.set('message-reporting', 'pretty');

		#if debug
		flags.set('debug', true);
		#else
		flags.set('dce', 'full');
		flags.set('analyzer-optimize', true);
		#end

		var group = new Group({
			children: [
				new Build({
					main: main,
					sources: sources.concat([app.config.paths.privateDirectory]),
					dependencies: dependencies.map(name -> ({name: name} : Dependency)),
					flags: flags,
					children: [
						new Output({
							type: Js,
							output: app.config.paths.createAssetOutputPath(options.output ?? 'app.js')
						})
					]
				})
			]
		});

		return group.run();
	}

	function outputMainFile(app:AppContext) {
		var path = main.withExtension('hx');
		var contents = template.execute({
			islands: islands.getIslandPaths().map(name -> {name: name})
		});
		return app.privateDirectory.file(path).write(contents);
	}
}

private final template = new Template("
// THIS FILE IS AUTOMATICALLY GENERATED.
//
// Don\'t edit it or commit it to version control.

function main() {
	hydrateIslands();
}

private function hydrateIslands() {
	var adaptor = new blok.html.client.ClientAdaptor();
	::foreach islands::::name::.hydrateIslands(adaptor);
	::end::
}
".trim());
