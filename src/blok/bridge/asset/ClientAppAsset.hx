package blok.bridge.asset;

import haxe.Template;

using kit.Hash;
using StringTools;
using haxe.io.Path;
using blok.bridge.cli.CliTools;

typedef ClientAppOptions = {
	public final ?output:String;
	public final ?sources:Array<String>;
	public final ?main:String;
	public final ?libraries:Array<String>;
	public final ?flags:Map<String, Dynamic>;
};

class ClientAppAsset implements Asset {
	final main:String;
	final options:ClientAppOptions;
	final islands:IslandContext;

	public function new(options, islands) {
		this.options = options;
		this.islands = islands;
		this.main = 'Bridge_' + (options?.main ?? 'Islands').hash();
	}

	public function getIdentifier():Null<String> {
		return '__blok.island.island-asset';
	}

	public function process(app:AppContext):Task<Nothing> {
		return outputMainFile(app).next(_ -> runHaxeCommand(app));
	}

	function runHaxeCommand(app:AppContext):Task<Nothing> {
		var path = createHaxeCommand(app);
		return switch Sys.command(path) {
			case 0: Nothing;
			case _: new Error(InternalError, 'Failed to generate haxe file');
		}
	}

	function createHaxeCommand(app:AppContext) {
		var sources:Array<String> = options.sources ?? ['src'];
		var output = app.config.paths.createAssetOutputPath(options.output ?? 'app.js');
		var libraries = options.libraries ?? [];
		var cmd = [
			'haxe'.createNodeCommand(),
			'-D blok.client',
			'-cp ${app.config.paths.privateDirectory}',
			'-main ${main}',
			'-js ${output}'
		];

		if (!libraries.contains('blok.bridge')) {
			libraries.push('blok.bridge');
		}

		for (source in sources) {
			cmd.push('-cp $source');
		}

		for (lib in libraries) {
			cmd.push('-lib $lib');
		}

		for (flag in getFlags()) {
			cmd.push(flag);
		}

		cmd.push('-D js-es=6');
		cmd.push('-D message-reporting=pretty');

		#if debug
		cmd.push('--debug');
		#else
		cmd.push('--dce full');
		cmd.push('-D analyzer-optimize');
		#end

		#if debug
		trace(cmd.join(' '));
		#end

		return cmd.join(' ');
	}

	function getFlags() {
		var out:Array<String> = [];
		for (flag => value in options.flags ?? []) {
			if (flag == 'debug') {
				if (value == true) out.push('--debug');
			} else if (flag == 'dce') {
				out.push('-dce ${value}');
			} else if (flag == 'macro') {
				out.push('--macro ${value}');
			} else if (value == true) {
				out.push('-D $flag');
			} else {
				out.push('-D ${flag}=${value}');
			}
		}
		return out;
	}

	function outputMainFile(app:AppContext) {
		var path = main.withExtension('hx');
		var contents = template.execute({
			islands: islands.getIslandPaths().map(name -> {name: name})
		});
		return app.privateDirectory.file(path).write(contents);
	}
}

private final template = new Template("
// THIS FILE IS AUTOMATICALLY GENERATED.
//
// Don\'t edit it or commit it to version control.

function main() {
	hydrateIslands();
}

private function hydrateIslands() {
	var adaptor = new blok.html.client.ClientAdaptor();
	::foreach islands::::name::.hydrateIslands(adaptor);
	::end::
}
".trim());
