package blok.bridge.asset;

using haxe.io.Path;
using blok.bridge.cli.CliTools;

typedef ClientAppOptions = {
	public final ?output:String;
	public final ?main:String;
	public final ?flags:Map<String, Dynamic>;
};

class ClientAppAsset implements Asset {
  static macro function getCurrentClassPaths();

	final options:ClientAppOptions;
	final islands:IslandContext;

	public function new(options, islands) {
		this.options = options;
		this.islands = islands;
	}

	public function getIdentifier():Null<String> {
		return '__blok.island.island-asset';
	}

	public function process(app:AppContext):Task<Nothing> {
		return outputMainFile(app).next(_ -> runHaxeCommand(app));
	}

	function runHaxeCommand(app:AppContext):Task<Nothing> {
		var path = createHaxeCommand(app);
		return switch Sys.command(path) {
			case 0: Nothing;
			case _: new Error(InternalError, 'Failed to generate haxe file');
		}
	}

	function createHaxeCommand(app:AppContext) {
		var paths:Array<String> = getCurrentClassPaths().filter(path -> path != '' && path != null);
    var output = app.paths.createAssetOutputPath(options.output ?? 'app.js');

		var cmd = [
			'haxe'.createNodeCommand(),
			'-D blok.client',
			'-cp ${app.paths.privateDirectory}',
			'-main ${options.main?.withoutExtension() ?? 'Island'}',
			'-js ${output}'
		];
		
    for (path in paths) {
      cmd.push('-cp $path');
    }

    for (flag in getFlags()) {
      cmd.push(flag);
    }

    cmd.push('-D js-es=6');
    cmd.push('-D message-reporting=pretty');

    #if debug
    cmd.push('--debug');
    #else
    cmd.push('--dce full');
    cmd.push('-D analyzer-optimize');
    #end

		#if debug
		trace(cmd.join(' '));
		#end

		return cmd.join(' ');
	}

	function getFlags() {
		var out:Array<String> = [];
		for (flag => value in options.flags ?? []) {
			if (flag == 'debug') {
				if (value == true) out.push('--debug');
			} else if (flag == 'dce') {
				out.push('-dce ${value}');
			} else if (flag == 'macro') {
				out.push('--macro ${value}');
			} else if (value == true) {
				out.push('-D $flag');
			} else {
				out.push('-D ${flag}=${value}');
			}
		}
		return out;
	}

	function outputMainFile(app:AppContext) {
		var path = (options.main ?? 'Island').withExtension('hx');
		var contents = '// THIS FILE IS AUTOMATICALLY GENERATED.
//
// Don\'t edit it or commit it to version control.

function main() {
	hydrateIslands();
}

private function hydrateIslands() {
	var adaptor = new blok.html.client.ClientAdaptor();
	${[for (island in islands.getIslandPaths()) {
		'$island.hydrateIslands(adaptor);';
	}].join('\n  ')}
}
';
		return app.privateDirectory.file(path).write(contents);
	}
}
