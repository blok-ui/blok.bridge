package blok.bridge.asset;

using haxe.io.Path;
using blok.bridge.cli.CliTools;

class ClientAppAsset implements Asset {
	final islands:IslandContext;

	public function new(islands) {
		this.islands = islands;
	}

	public function getIdentifier():Null<String> {
		return '__blok.island.island-asset';
	}

	public function process(app:AppContext):Task<Nothing> {
		return outputMainFile(app).next(_ -> runHaxeCommand(app));
	}

	// function isBuildNeeded() {
	// }

	function runHaxeCommand(app:AppContext):Task<Nothing> {
		var path = createHaxeCommand(app);
		return switch Sys.command(path) {
			case 0: Nothing;
			case _: new Error(InternalError, 'Failed to generate haxe file');
		}
	}

	function createHaxeCommand(app:AppContext) {
		var project = app.project;
		var client = project.client;
		var target = client.target;
		var paths = project.paths;
		var output = paths.createAssetOutputPath(target?.output ?? 'app.js');
		var cmd = [
			'haxe'.createNodeCommand(),
			'-D blok.client',
			'-cp ${paths.privateDirectory}',
			'-main ${client.main}',
			'-js ${output}'
		].concat(project.getBuildFlagsForClient());

		#if debug
		trace(cmd.join(' '));
		#end

		return cmd.join(' ');
	}

	function outputMainFile(app:AppContext) {
		var client = app.project.client;
		var path = client.main.withExtension('hx');
		var contents = '// THIS FILE IS AUTOMATICALLY GENERATED.
//
// Don\'t edit it or commit it to version control.

function main() {
	hydrateIslands();
}

private function hydrateIslands() {
	var adaptor = new blok.html.client.ClientAdaptor();
	${[for (island in islands.getIslandPaths()) {
		'$island.hydrateIslands(adaptor);';
	}].join('\n  ')}
}
';
		return app.privateDirectory.file(path).write(contents);
	}
}
