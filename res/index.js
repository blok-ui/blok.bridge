// Generated by Haxe 4.3.2
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class HxOverrides {
	static cca(s,index) {
		let x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static remove(a,obj) {
		let i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = "HxOverrides";
class Lambda {
	static has(it,elt) {
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			if(x1 == elt) {
				return true;
			}
		}
		return false;
	}
	static exists(it,f) {
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			if(f(x1)) {
				return true;
			}
		}
		return false;
	}
	static count(it,pred) {
		let n = 0;
		if(pred == null) {
			let _ = $getIterator(it);
			while(_.hasNext()) {
				_.next();
				++n;
			}
		} else {
			let x = $getIterator(it);
			while(x.hasNext()) {
				let x1 = x.next();
				if(pred(x1)) {
					++n;
				}
			}
		}
		return n;
	}
	static find(it,f) {
		let v = $getIterator(it);
		while(v.hasNext()) {
			let v1 = v.next();
			if(f(v1)) {
				return v1;
			}
		}
		return null;
	}
}
Lambda.__name__ = "Lambda";
Math.__name__ = "Math";
class Reflect {
	static field(o,field) {
		try {
			return o[field];
		} catch( _g ) {
			return null;
		}
	}
	static fields(o) {
		let a = [];
		if(o != null) {
			let hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static deleteField(o,field) {
		if(!Object.prototype.hasOwnProperty.call(o,field)) {
			return false;
		}
		delete(o[field]);
		return true;
	}
}
Reflect.__name__ = "Reflect";
function Run_main() {
	let bridge = new blok_bridge_Bridge([new ex_api_FooApi()],function(_) {
		return blok_ui_Scope.node({ child : function(context) {
			ex_island_ApiAware.hydrateIslands(context);
			ex_island_Counter.hydrateIslands(context);
			return null;
		}});
	});
	bridge.mount().handle(function(res) {
		switch(res._hx_index) {
		case 0:
			console.log("test/Run.hx:14:",res.value.toString());
			break;
		case 1:
			console.log("test/Run.hx:15:",res.error.get_message());
			break;
		}
	});
}
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
}
Std.__name__ = "Std";
class StringTools {
	static htmlUnescape(s) {
		return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
	}
	static isSpace(s,pos) {
		let c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
}
StringTools.__name__ = "StringTools";
class blok_adaptor_Adaptor {
}
blok_adaptor_Adaptor.__name__ = "blok.adaptor.Adaptor";
blok_adaptor_Adaptor.__isInterface__ = true;
Object.assign(blok_adaptor_Adaptor.prototype, {
	__class__: blok_adaptor_Adaptor
});
class blok_adaptor_Cursor {
}
blok_adaptor_Cursor.__name__ = "blok.adaptor.Cursor";
blok_adaptor_Cursor.__isInterface__ = true;
Object.assign(blok_adaptor_Cursor.prototype, {
	__class__: blok_adaptor_Cursor
});
class blok_adaptor_RealNodeHost {
}
blok_adaptor_RealNodeHost.__name__ = "blok.adaptor.RealNodeHost";
blok_adaptor_RealNodeHost.__isInterface__ = true;
function blok_adaptor_RealNodeHostTools_findNearestRealNode(component) {
	return kit_MaybeTools.orThrow(kit_MaybeTools.map(component.findAncestor(function(component) {
		return js_Boot.__implements(component,blok_adaptor_RealNodeHost);
	}),function(component) {
		return component.getRealNode();
	}),"No real node found");
}
class blok_boundary_Boundary {
}
blok_boundary_Boundary.__name__ = "blok.boundary.Boundary";
blok_boundary_Boundary.__isInterface__ = true;
Object.assign(blok_boundary_Boundary.prototype, {
	__class__: blok_boundary_Boundary
});
function blok_boundary_BoundaryTools_findBoundary(component) {
	let _g = component.findAncestor(function(component) {
		return js_Boot.__implements(component,blok_boundary_Boundary);
	});
	switch(_g._hx_index) {
	case 0:
		return kit_Maybe.Some(_g.value);
	case 1:
		return kit_Maybe.None;
	}
}
function blok_boundary_BoundaryTools_tryToHandleWithBoundary(component,object) {
	let _g = blok_boundary_BoundaryTools_findBoundary(component);
	switch(_g._hx_index) {
	case 0:
		_g.value.handle(component,object);
		break;
	case 1:
		throw haxe_Exception.thrown(object);
	}
}
class blok_core_Disposable {
}
blok_core_Disposable.__name__ = "blok.core.Disposable";
blok_core_Disposable.__isInterface__ = true;
Object.assign(blok_core_Disposable.prototype, {
	__class__: blok_core_Disposable
});
class blok_context_Providable {
}
blok_context_Providable.__name__ = "blok.context.Providable";
blok_context_Providable.__isInterface__ = true;
blok_context_Providable.__interfaces__ = [blok_core_Disposable];
Object.assign(blok_context_Providable.prototype, {
	__class__: blok_context_Providable
});
class blok_bridge_ApiBase {
}
blok_bridge_ApiBase.__name__ = "blok.bridge.ApiBase";
blok_bridge_ApiBase.__isInterface__ = true;
blok_bridge_ApiBase.__interfaces__ = [blok_context_Providable];
class blok_bridge_ApiCollection {
	static _new(apis) {
		return apis;
	}
	static toContextFactories(this1) {
		let result = new Array(this1.length);
		let _g = 0;
		let _g1 = this1.length;
		while(_g < _g1) {
			let i = _g++;
			let api = this1[i];
			result[i] = function() {
				try {
					return js_Boot.__cast(api , blok_context_Providable);
				} catch( _g ) {
					return null;
				}
			};
		}
		return result;
	}
}
class blok_bridge_Bridge {
	constructor(apis,render,options) {
		this.apis = blok_bridge_ApiCollection._new(apis);
		this.render = render;
		this.options = options != null ? options : { rootId : "root"};
	}
	mount() {
		let doc = this.createDocument();
		let _gthis = this;
		return new kit_Future(function(activate) {
			let suspended = false;
			_gthis.createRoot(doc,function() {
				return blok_suspense_SuspenseBoundary.node({ onSuspended : function() {
					suspended = true;
				}, onComplete : function() {
					activate(kit_Result.Ok(doc));
				}, fallback : function() {
					return blok_ui_Text.ofString("loading...");
				}, child : _gthis.renderRoot()});
			});
			if(!suspended) {
				activate(kit_Result.Ok(doc));
			}
		});
	}
	renderRoot() {
		let _gthis = this;
		return blok_context_Provider.compose(blok_bridge_ApiCollection.toContextFactories(this.apis),function(_) {
			return _gthis.render(_gthis);
		});
	}
	createDocument() {
		return new blok_bridge_client_ClientDocument({ rootId : this.options.rootId});
	}
	createRoot(document,render) {
		blok_html_Client_hydrate(document.getRootLayer(),render);
	}
}
blok_bridge_Bridge.__name__ = "blok.bridge.Bridge";
Object.assign(blok_bridge_Bridge.prototype, {
	__class__: blok_bridge_Bridge
});
class blok_bridge_Document {
	constructor(options) {
		this.options = options;
	}
	getRootLayer() {
		return this.getLayer(this.options.rootId);
	}
}
blok_bridge_Document.__name__ = "blok.bridge.Document";
Object.assign(blok_bridge_Document.prototype, {
	__class__: blok_bridge_Document
});
class blok_core_DisposableHost {
}
blok_core_DisposableHost.__name__ = "blok.core.DisposableHost";
blok_core_DisposableHost.__isInterface__ = true;
Object.assign(blok_core_DisposableHost.prototype, {
	__class__: blok_core_DisposableHost
});
class blok_ui_ComponentBase {
	constructor() {
		if(blok_ui_ComponentBase._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.__disposables = new blok_core_DisposableCollection();
		this.__renderMode = 0;
		this.__invalidChildren = [];
		this.__adaptor = null;
		this.__parent = null;
		this.__slot = null;
		this.__status = 0;
	}
	mount(parent,slot) {
		this.__init(parent,slot);
		this.__status = 3;
		this.__renderMode = 0;
		try {
			this.__initialize();
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g);
			this.__cleanupAfterValidation();
			throw haxe_Exception.thrown(_g1);
		}
		this.__cleanupAfterValidation();
	}
	hydrate(cursor,parent,slot) {
		this.__init(parent,slot);
		this.__status = 3;
		this.__renderMode = 1;
		try {
			this.__hydrate(cursor);
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g);
			this.__cleanupAfterValidation();
			throw haxe_Exception.thrown(_g1);
		}
		this.__cleanupAfterValidation();
	}
	__init(parent,slot) {
		if(this.__status != 0) {
			throw new blok_core_BlokComponentException("Attempted to initialize a component that has already been mounted",this);
		}
		this.__parent = parent;
		this.__slot = slot;
		if(this.__adaptor == null) {
			if(parent == null) {
				throw new blok_core_BlokComponentException("Failed assertion: parent != null",this);
			}
			this.__adaptor = parent.getAdaptor();
		}
	}
	update(node) {
		if(this.__status == 3) {
			throw new blok_core_BlokComponentException("Failed assertion: __status != Rendering",this);
		}
		if(this.__node == node) {
			this.__cleanupAfterValidation();
			return;
		}
		this.__status = 3;
		this.__renderMode = 0;
		this.__node = node;
		this.__update();
		this.__cleanupAfterValidation();
	}
	invalidate() {
		if(this.__status == 2) {
			return;
		}
		this.__status = 2;
		let _g = this.__parent;
		if(_g == null) {
			this.scheduleValidation();
		} else {
			_g.scheduleChildForValidation(this);
		}
	}
	validate() {
		if(this.__status == 3) {
			throw new blok_core_BlokComponentException("Attempted to validate a Component that was already building",this);
		}
		if(this.__status == 4) {
			throw new blok_core_BlokComponentException("Attempted to validate a Component that was disposing",this);
		}
		if(this.__status == 5) {
			throw new blok_core_BlokComponentException("Attempted to validate a Component that was disposed",this);
		}
		if(this.__status != 2) {
			this.validateInvalidChildren();
			return;
		}
		this.__status = 3;
		this.__renderMode = 0;
		this.__validate();
		this.__cleanupAfterValidation();
	}
	findAncestor(match) {
		let _g = this.__parent;
		if(_g == null) {
			return kit_Maybe.None;
		} else if(match(_g)) {
			return kit_Maybe.Some(_g);
		} else {
			return _g.findAncestor(match);
		}
	}
	findAncestorOfType(kind) {
		if(this.__parent == null) {
			return kit_Maybe.None;
		}
		let value = this.__parent;
		let _g = js_Boot.__downcastCheck(value,kind) ? value : null;
		if(_g == null) {
			return this.__parent.findAncestorOfType(kind);
		} else {
			return kit_Maybe.Some(_g);
		}
	}
	findChild(match,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		let result = null;
		this.visitChildren(function(child) {
			if(match(child)) {
				result = child;
				return false;
			}
			return true;
		});
		if(result == null) {
			if(recursive) {
				this.visitChildren(function(child) {
					let _g = child.findChild(match,true);
					switch(_g._hx_index) {
					case 0:
						result = _g.value;
						return false;
					case 1:
						return true;
					}
				});
				if(result == null) {
					return kit_Maybe.None;
				} else {
					return kit_Maybe.Some(result);
				}
			} else {
				return kit_Maybe.None;
			}
		} else {
			return kit_Maybe.Some(result);
		}
	}
	findChildOfType(kind,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		return this.findChild(function(child) {
			return js_Boot.__instanceof(child,kind);
		},recursive);
	}
	getAdaptor() {
		if(this.__adaptor == null) {
			throw new blok_core_BlokComponentException("Failed assertion: __adaptor != null",this);
		}
		return this.__adaptor;
	}
	createSlot(index,previous) {
		return new blok_ui_Slot(index,previous);
	}
	updateSlot(slot) {
		if(this.__slot == slot) {
			return;
		}
		let oldSlot = this.__slot;
		this.__slot = slot;
		this.__updateSlot(oldSlot,this.__slot);
	}
	scheduleValidation() {
		let adaptor = this.getAdaptor();
		let _gthis = this;
		adaptor.schedule(function() {
			_gthis.validate();
		});
	}
	__cleanupAfterValidation() {
		this.__renderMode = 0;
		if(this.__invalidChildren.length > 0) {
			this.__invalidChildren = [];
		}
		if(this.__status != 2) {
			this.__status = 1;
		}
	}
	scheduleChildForValidation(child) {
		if(this.__status == 2) {
			return;
		}
		if(this.__invalidChildren.includes(child)) {
			return;
		}
		this.__invalidChildren.push(child);
		if(this.__parent == null) {
			this.scheduleValidation();
			return;
		}
		this.__parent.scheduleChildForValidation(this);
	}
	validateInvalidChildren() {
		if(this.__invalidChildren.length == 0) {
			return;
		}
		let children = this.__invalidChildren.slice();
		this.__invalidChildren = [];
		let _g = 0;
		while(_g < children.length) {
			let child = children[_g];
			++_g;
			child.validate();
		}
	}
	addDisposable(disposable) {
		this.__disposables.addDisposable(disposable);
	}
	removeDisposable(disposable) {
		this.__disposables.removeDisposable(disposable);
	}
	dispose() {
		if(this.__status == 3) {
			throw new blok_core_BlokComponentException("Attempted to dispose a component while it was building",this);
		}
		if(this.__status == 4) {
			throw new blok_core_BlokComponentException("Attempted to dispose a component that is already disposing",this);
		}
		if(this.__status == 5) {
			throw new blok_core_BlokComponentException("Attempted to dispose a component that was already disposed",this);
		}
		this.__status = 4;
		this.__invalidChildren = [];
		this.__disposables.dispose();
		this.__dispose();
		this.__slot = null;
		this.visitChildren(function(child) {
			child.dispose();
			return true;
		});
		this.__status = 5;
	}
}
blok_ui_ComponentBase.__name__ = "blok.ui.ComponentBase";
blok_ui_ComponentBase.__interfaces__ = [blok_core_DisposableHost,blok_core_Disposable];
Object.assign(blok_ui_ComponentBase.prototype, {
	__class__: blok_ui_ComponentBase
});
class blok_bridge_IslandComponent extends blok_ui_ComponentBase {
	constructor() {
		if(blok_ui_ComponentBase._hx_skip_constructor) {
			super();
			return;
		}
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.__child = null;
		super._hx_constructor();
	}
	__render() {
		let _gthis = this;
		let child = blok_ui_Scope.node({ child : function(_) {
			return _gthis.render();
		}});
		return child;
	}
	__initialize() {
		this.__child = this.__render().createComponent();
		let tmp = this.__child;
		if(tmp != null) {
			tmp.mount(this,this.__slot);
		}
		blok_signal_Graph_withOwner(this,$bind(this,this.setup));
	}
	__hydrate(cursor) {
		this.__child = this.__render().createComponent();
		let tmp = this.__child;
		if(tmp != null) {
			tmp.hydrate(cursor,this,this.__slot);
		}
		blok_signal_Graph_withOwner(this,$bind(this,this.setup));
	}
	__update() {
		this.__updateProps();
		this.__child = blok_diffing_Differ_updateChild(this,this.__child,this.__render(),this.__slot);
	}
	__validate() {
		this.__child = blok_diffing_Differ_updateChild(this,this.__child,this.__render(),this.__slot);
	}
	__dispose() {
	}
	__updateSlot(oldSlot,newSlot) {
		let tmp = this.__child;
		if(tmp != null) {
			tmp.updateSlot(newSlot);
		}
	}
	getRealNode() {
		let tmp = this.__child;
		let node = tmp != null ? tmp.getRealNode() : null;
		if(node == null) {
			throw new blok_core_BlokComponentException("Component does not have a node",this);
		}
		return node;
	}
	visitChildren(visitor) {
		if(this.__child != null) {
			visitor(this.__child);
		}
	}
}
blok_bridge_IslandComponent.__name__ = "blok.bridge.IslandComponent";
blok_bridge_IslandComponent.__super__ = blok_ui_ComponentBase;
Object.assign(blok_bridge_IslandComponent.prototype, {
	__class__: blok_bridge_IslandComponent
});
function blok_bridge_IslandTools_getIslandElementsForComponent(name) {
	let items = window.document.querySelectorAll("blok-island[data-component=\"" + name + "\"]");
	let _g = [];
	let _g1 = 0;
	let _g2 = items.length;
	while(_g1 < _g2) {
		let i = _g1++;
		let tmp;
		try {
			tmp = js_Boot.__cast(items.item(i) , HTMLElement);
		} catch( _g ) {
			tmp = null;
		}
		_g.push(tmp);
	}
	return _g;
}
function blok_bridge_IslandTools_getIslandProps(el) {
	let tmp = el.getAttribute("data-props");
	let raw = tmp != null ? tmp : "";
	return JSON.parse(StringTools.htmlUnescape(raw));
}
class blok_bridge_api_Api_$944da21c517df0c48dfbef7af28f3093 {
}
blok_bridge_api_Api_$944da21c517df0c48dfbef7af28f3093.__name__ = "blok.bridge.api.Api_944da21c517df0c48dfbef7af28f3093";
blok_bridge_api_Api_$944da21c517df0c48dfbef7af28f3093.__isInterface__ = true;
blok_bridge_api_Api_$944da21c517df0c48dfbef7af28f3093.__interfaces__ = [blok_bridge_ApiBase];
class blok_bridge_client_ClientDocument extends blok_bridge_Document {
	constructor(options) {
		super(options);
	}
	getLayer(id) {
		let layer = window.document.getElementById(id);
		if(layer == null) {
			layer = window.document.createElement("div");
			layer.setAttribute("id",id);
			window.document.body.appendChild(layer);
		}
		return layer;
	}
	toString() {
		return "";
	}
}
blok_bridge_client_ClientDocument.__name__ = "blok.bridge.client.ClientDocument";
blok_bridge_client_ClientDocument.__super__ = blok_bridge_Document;
Object.assign(blok_bridge_client_ClientDocument.prototype, {
	__class__: blok_bridge_client_ClientDocument
});
class kit_http_Client {
}
kit_http_Client.__name__ = "kit.http.Client";
kit_http_Client.__isInterface__ = true;
class kit_http_client_BrowserClient {
	constructor(options) {
		this.options = options != null ? options : { };
	}
	request(req) {
		let _g = req.url.scheme;
		if(_g == null) {
			return kit_Task.ofError(new kit__$Error_ErrorObject(400,"Missing Scheme (expected http/https) in URL: " + kit_http_Url.toString(req.url)));
		} else {
			switch(_g) {
			case "http":case "https":
				let headers = new Headers();
				let _g1 = 0;
				let _g2 = req.headers;
				while(_g1 < _g2.length) {
					let header = _g2[_g1];
					++_g1;
					headers.append(header.name,header.value);
				}
				return kit_Task.ofJsPromise($global.fetch(kit_http_Url.toString(req.url),{ cache : this.options.cache, credentials : this.options.credentials, mode : this.options.mode, referrerPolicy : this.options.referrerPolicy, body : kit_MaybeTools.unwrap(kit_MaybeTools.map(req.body,function(body) {
					return new Int8Array(body.b.bufferValue);
				})), headers : headers, method : req.method}).then(function(res) {
					let _g = [];
					let jsIterator = res.headers.entries();
					let _g_jsIterator = jsIterator;
					let _g_lastStep = jsIterator.next();
					while(!_g_lastStep.done) {
						let v = _g_lastStep.value;
						_g_lastStep = _g_jsIterator.next();
						let entry = v;
						_g.push({ name : entry[0], value : entry[1] == null ? "null" : Std.string(entry[1])});
					}
					let headers = _g;
					return res.arrayBuffer().then(function(data) {
						let res1 = res.status;
						let headers1 = headers;
						let tmp;
						if(data == null) {
							tmp = null;
						} else {
							let data1 = data;
							tmp = haxe_io_Bytes.ofData(data1);
						}
						return new kit_http_Response(res1,headers1,tmp);
					});
				}));
			default:
				return kit_Task.ofError(new kit__$Error_ErrorObject(400,"Missing Scheme (expected http/https) in URL: " + kit_http_Url.toString(req.url)));
			}
		}
	}
}
kit_http_client_BrowserClient.__name__ = "kit.http.client.BrowserClient";
kit_http_client_BrowserClient.__interfaces__ = [kit_http_Client];
Object.assign(kit_http_client_BrowserClient.prototype, {
	__class__: kit_http_client_BrowserClient
});
function blok_bridge_client_Fetch_fetch(request) {
	let base = kit_http_UrlObject.parse($global.location.origin);
	console.log("src/blok/bridge/client/Fetch.hx:16:",base == null ? "null" : kit_http_Url.toString(base));
	let url = request.url.withScheme(base.scheme).withDomain(base.domain);
	let handler = function(response) {
		let tmp = kit_MaybeTools.unwrap(response.body);
		let tmp1 = tmp != null ? tmp : null;
		let data = tmp1 != null ? tmp1.toString() : null;
		if(data == null) {
			return kit_Task.ofError(new kit__$Error_ErrorObject(404,"Empty response"));
		}
		try {
			return kit_Task.resolve(JSON.parse(data));
		} catch( _g ) {
			let e = haxe_Exception.caught(_g);
			return kit_Task.ofError(new kit__$Error_ErrorObject(500,"Json parse failed: " + e.get_message()));
		}
	};
	return blok_bridge_client_Fetch_client.request(request.withUrl(url)).flatMap(function(result) {
		switch(result._hx_index) {
		case 0:
			let value = result.value;
			return handler(value);
		case 1:
			let error = result.error;
			return kit_Task.reject(error);
		}
	});
}
class blok_context_Context {
}
blok_context_Context.__name__ = "blok.context.Context";
blok_context_Context.__isInterface__ = true;
blok_context_Context.__interfaces__ = [blok_context_Providable];
class blok_ui_Component extends blok_ui_ComponentBase {
	constructor() {
		if(blok_ui_ComponentBase._hx_skip_constructor) {
			super();
			return;
		}
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.__rendered = null;
		this.__child = null;
		super._hx_constructor();
	}
	__render() {
		if(this.__rendered != null) {
			this.removeDisposable(this.__rendered);
			this.__rendered.dispose();
			this.__rendered = null;
		}
		let _gthis = this;
		blok_signal_Graph_withOwner(this,function() {
			let this1 = new blok_signal_ComputationObject(function() {
				switch(_gthis.__status) {
				case 4:case 5:
					return blok_ui_Placeholder.node();
				default:
					let node;
					try {
						node = _gthis.render();
					} catch( _g ) {
						let _g1 = haxe_Exception.caught(_g).unwrap();
						blok_boundary_BoundaryTools_tryToHandleWithBoundary(_gthis,_g1);
						node = null;
					}
					if(_gthis.__status != 3) {
						_gthis.invalidate();
					}
					let tmp = node;
					if(tmp != null) {
						return tmp;
					} else {
						return blok_ui_Placeholder.node();
					}
				}
			},null);
			_gthis.__rendered = this1;
		});
		let tmp = this.__rendered;
		let tmp1 = tmp != null ? tmp.peek() : null;
		if(tmp1 != null) {
			return tmp1;
		} else {
			return blok_ui_Placeholder.node();
		}
	}
	__initialize() {
		this.__child = this.__render().createComponent();
		let tmp = this.__child;
		if(tmp != null) {
			tmp.mount(this,this.__slot);
		}
		blok_signal_Graph_withOwner(this,$bind(this,this.setup));
	}
	__hydrate(cursor) {
		this.__child = this.__render().createComponent();
		let tmp = this.__child;
		if(tmp != null) {
			tmp.hydrate(cursor,this,this.__slot);
		}
		blok_signal_Graph_withOwner(this,$bind(this,this.setup));
	}
	__update() {
		this.__updateProps();
		this.__child = blok_diffing_Differ_updateChild(this,this.__child,this.__render(),this.__slot);
	}
	__validate() {
		let tmp = this.__rendered;
		this.__child = blok_diffing_Differ_updateChild(this,this.__child,tmp != null ? tmp.peek() : null,this.__slot);
	}
	__dispose() {
		this.__rendered = null;
	}
	__updateSlot(oldSlot,newSlot) {
		let tmp = this.__child;
		if(tmp != null) {
			tmp.updateSlot(newSlot);
		}
	}
	getRealNode() {
		let node = null;
		let _gthis = this;
		this.visitChildren(function(component) {
			if(node != null) {
				throw new blok_core_BlokComponentException("Component has more than one nodes",_gthis);
			}
			node = component.getRealNode();
			return true;
		});
		if(node == null) {
			throw new blok_core_BlokComponentException("Component does not have a node",this);
		}
		return node;
	}
	visitChildren(visitor) {
		if(this.__child != null) {
			visitor(this.__child);
		}
	}
}
blok_ui_Component.__name__ = "blok.ui.Component";
blok_ui_Component.__super__ = blok_ui_ComponentBase;
Object.assign(blok_ui_Component.prototype, {
	__class__: blok_ui_Component
});
class kit_UniqueId {
}
class blok_context_Provider extends blok_ui_Component {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.context = null;
		super._hx_constructor();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_create = blok_signal_Signal.ofValue(props.create);
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
		let prevOwner = blok_signal_Graph_setCurrentOwner(kit_Maybe.Some(this));
		try {
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g);
			blok_signal_Graph_setCurrentOwner(prevOwner);
			throw haxe_Exception.thrown(_g1);
		}
		blok_signal_Graph_setCurrentOwner(prevOwner);
	}
	setup() {
		let _gthis = this;
		this.addDisposable(new blok_core_DisposableCallback(function() {
			let tmp = _gthis.context;
			if(tmp != null) {
				tmp.dispose();
			}
			_gthis.context = null;
		}));
	}
	match(contextId) {
		let tmp = this.context;
		return (tmp != null ? tmp.getContextId() : null) == contextId;
	}
	getContext() {
		if(this.context != null) {
			return kit_Maybe.Some(this.context);
		} else {
			return kit_Maybe.None;
		}
	}
	render() {
		let newContext = (this.get_create())();
		if(newContext != this.context) {
			let tmp = this.context;
			if(tmp != null) {
				tmp.dispose();
			}
			this.context = (this.get_create())();
		}
		return (this.get_child())(this.context);
	}
	get_create() {
		return this.__backing_create.get();
	}
	get_child() {
		return this.__backing_child.get();
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_create.set(props.create);
			_gthis.__backing_child.set(props.child);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_context_Provider.componentType;
	}
	static compose(contexts,child) {
		let contextFactory = contexts.shift();
		let component = blok_context_Provider.node({ create : contextFactory, child : function(_) {
			return blok_ui_Scope.node({ child : child});
		}});
		while(contexts.length > 0) {
			let wrapped = component;
			contextFactory = contexts.shift();
			component = blok_context_Provider.node({ create : contextFactory, child : function(_) {
				return wrapped;
			}});
		}
		return component;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_context_Provider.componentType,props,function(node) {
			return new blok_context_Provider(node);
		},key);
	}
}
blok_context_Provider.__name__ = "blok.context.Provider";
blok_context_Provider.__super__ = blok_ui_Component;
Object.assign(blok_context_Provider.prototype, {
	__class__: blok_context_Provider
});
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	unwrap() {
		return this.__nativeException;
	}
	toString() {
		return this.get_message();
	}
	get_message() {
		return this.message;
	}
	get_native() {
		return this.__nativeException;
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			return e;
		}
	}
}
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
});
class blok_core_BlokException extends haxe_Exception {
	constructor(message,previous,native) {
		super(message,previous,native);
	}
}
blok_core_BlokException.__name__ = "blok.core.BlokException";
blok_core_BlokException.__super__ = haxe_Exception;
Object.assign(blok_core_BlokException.prototype, {
	__class__: blok_core_BlokException
});
class blok_core_BlokComponentException extends blok_core_BlokException {
	constructor(message,component) {
		super([message,"","Component tree:","",blok_core_BlokException_getComponentDescription(component)].join("\n"));
	}
}
blok_core_BlokComponentException.__name__ = "blok.core.BlokComponentException";
blok_core_BlokComponentException.__super__ = blok_core_BlokException;
Object.assign(blok_core_BlokComponentException.prototype, {
	__class__: blok_core_BlokComponentException
});
function blok_core_BlokException_getComponentDebugName(component) {
	let c = js_Boot.getClass(component);
	return c.__name__;
}
function blok_core_BlokException_getComponentDescription(component) {
	let name = blok_core_BlokException_getComponentDebugName(component);
	let ancestor = component.__parent;
	let _g = [];
	while(ancestor != null) {
		let name = blok_core_BlokException_getComponentDebugName(ancestor);
		ancestor = ancestor.__parent;
		_g.push(name);
	}
	_g.reverse();
	_g.push(name);
	let _g1 = [];
	let _g_current = 0;
	while(_g_current < _g.length) {
		let _g_value = _g[_g_current];
		let _g_key = _g_current++;
		let _g2 = [];
		let _g3 = 0;
		while(_g3 < _g_key) {
			++_g3;
			_g2.push("  ");
		}
		let padding = _g2.join("");
		if(_g_key == _g.length - 1) {
			_g1.push("" + padding + "-> " + _g_value);
		} else {
			_g1.push("" + padding + _g_value);
		}
	}
	return _g1.join("\n");
}
class blok_core_DisposableCollection {
	constructor() {
		this.disposables = new haxe_ds_List();
		this.isDisposed = false;
	}
	addDisposable(disposable) {
		if(this.isDisposed) {
			disposable.dispose();
			return;
		}
		if(Lambda.has(this.disposables,disposable)) {
			return;
		}
		this.disposables.add(disposable);
	}
	removeDisposable(disposable) {
		this.disposables.remove(disposable);
	}
	dispose() {
		this.isDisposed = true;
		let _g_head = this.disposables.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			this.disposables.remove(val);
			val.dispose();
		}
	}
}
blok_core_DisposableCollection.__name__ = "blok.core.DisposableCollection";
blok_core_DisposableCollection.__interfaces__ = [blok_core_DisposableHost,blok_core_Disposable];
Object.assign(blok_core_DisposableCollection.prototype, {
	__class__: blok_core_DisposableCollection
});
class blok_core_DisposableCallback {
	constructor(handler) {
		this.handler = handler;
	}
	dispose() {
		this.handler();
	}
}
blok_core_DisposableCallback.__name__ = "blok.core.DisposableCallback";
blok_core_DisposableCallback.__interfaces__ = [blok_core_Disposable];
Object.assign(blok_core_DisposableCallback.prototype, {
	__class__: blok_core_DisposableCallback
});
class blok_core_Scheduler {
	constructor() {
		this.onUpdate = null;
	}
	schedule(item) {
		if(this.onUpdate == null) {
			this.onUpdate = [];
			this.onUpdate.push(item);
			this.later($bind(this,this.doUpdate));
		} else {
			this.onUpdate.push(item);
		}
	}
	later(exec) {
		if(blok_core_Scheduler.hasRaf) {
			window.requestAnimationFrame(function(_) {
				exec();
			});
		} else {
			haxe_Timer.delay(function() {
				exec();
			},10);
		}
	}
	doUpdate() {
		if(this.onUpdate == null) {
			return;
		}
		let currentUpdates = this.onUpdate.slice();
		this.onUpdate = null;
		let _g = 0;
		while(_g < currentUpdates.length) {
			let u = currentUpdates[_g];
			++_g;
			u();
		}
	}
}
blok_core_Scheduler.__name__ = "blok.core.Scheduler";
Object.assign(blok_core_Scheduler.prototype, {
	__class__: blok_core_Scheduler
});
function blok_diffing_Differ_updateChild(parent,child,node,slot) {
	if(node == null) {
		if(child != null) {
			child.dispose();
		}
		return null;
	}
	if(child != null) {
		if(child.__node == node) {
			if(child.__slot.changed(slot)) {
				child.updateSlot(slot);
			}
			return child;
		} else if(blok_diffing_Differ_canBeUpdatedByNode(child,node)) {
			if(child.__slot.changed(slot)) {
				child.updateSlot(slot);
			}
			child.update(node);
			return child;
		} else {
			child.dispose();
			return blok_diffing_Differ_createComponentForVNode(parent,node,slot);
		}
	} else {
		return blok_diffing_Differ_createComponentForVNode(parent,node,slot);
	}
}
function blok_diffing_Differ_diffChildren(parent,oldChildren,newNodes) {
	let newHead = 0;
	let oldHead = 0;
	let newTail = newNodes.length - 1;
	let oldTail = oldChildren.length - 1;
	let previousChild = null;
	let newChildren = [];
	while(oldHead <= oldTail && newHead <= newTail) {
		let oldChild = oldChildren[oldHead];
		let newNode = newNodes[newHead];
		if(oldChild == null || !blok_diffing_Differ_canBeUpdatedByNode(oldChild,newNode)) {
			break;
		}
		let newChild = blok_diffing_Differ_updateChild(parent,oldChild,newNode,parent.createSlot(newHead,previousChild));
		newChildren[newHead] = newChild;
		previousChild = newChild;
		++newHead;
		++oldHead;
	}
	while(oldHead <= oldTail && newHead <= newTail) {
		let oldChild = oldChildren[oldTail];
		let newNode = newNodes[newTail];
		if(oldChild == null || !blok_diffing_Differ_canBeUpdatedByNode(oldChild,newNode)) {
			break;
		}
		--oldTail;
		--newTail;
	}
	let hasOldChildren = oldHead <= oldTail;
	let oldKeyedChildren = null;
	if(hasOldChildren) {
		oldKeyedChildren = new blok_diffing_KeyMap();
		while(oldHead <= oldTail) {
			let oldChild = oldChildren[oldHead];
			if(oldChild != null) {
				if(oldChild.__node.key != null) {
					oldKeyedChildren.set(oldChild.__node.key,oldChild);
				} else {
					oldChild.dispose();
				}
			}
			++oldHead;
		}
	}
	while(newHead <= newTail) {
		let oldChild = null;
		let newNode = newNodes[newHead];
		if(hasOldChildren) {
			let key = newNode.key;
			if(key != null) {
				if(oldKeyedChildren == null) {
					throw haxe_Exception.thrown("assert");
				}
				oldChild = oldKeyedChildren.get(key);
				if(oldChild != null) {
					if(blok_diffing_Differ_canBeUpdatedByNode(oldChild,newNode)) {
						oldKeyedChildren.remove(key);
					} else {
						oldChild = null;
					}
				}
			}
		}
		let newChild = blok_diffing_Differ_updateChild(parent,oldChild,newNode,parent.createSlot(newHead,previousChild));
		newChildren[newHead] = newChild;
		previousChild = newChild;
		++newHead;
	}
	newTail = newNodes.length - 1;
	oldTail = oldChildren.length - 1;
	while(oldHead <= oldTail && newHead <= newTail) {
		let oldChild = oldChildren[oldHead];
		let newNode = newNodes[newHead];
		let newChild = blok_diffing_Differ_updateChild(parent,oldChild,newNode,parent.createSlot(newHead,previousChild));
		newChildren[newHead] = newChild;
		previousChild = newChild;
		++newHead;
		++oldHead;
	}
	if(hasOldChildren && (oldKeyedChildren != null && oldKeyedChildren.isNotEmpty())) {
		oldKeyedChildren.each(function(_,element) {
			element.dispose();
		});
	}
	if(Lambda.exists(newChildren,function(el) {
		return el == null;
	})) {
		throw new blok_core_BlokException("Failed assertion: !Lambda.exists(newChildren, el -> el == null)");
	}
	return newChildren;
}
function blok_diffing_Differ_createComponentForVNode(parent,node,slot) {
	let element = node.createComponent();
	element.mount(parent,slot);
	return element;
}
function blok_diffing_Differ_canBeUpdatedByNode(component,node) {
	if(component.canBeUpdatedByNode(node)) {
		return component.__node.key == node.key;
	} else {
		return false;
	}
}
class blok_diffing_Key {
	static isString(this1) {
		return typeof(this1) == "string";
	}
}
class blok_diffing_KeyMap {
	constructor() {
		this.objects = null;
		this.strings = null;
	}
	set(key,value) {
		if(blok_diffing_Key.isString(key)) {
			let key1 = key;
			if(this.strings == null) {
				let _g = new haxe_ds_StringMap();
				_g.h[key1] = value;
				this.strings = _g;
			} else {
				this.strings.h[key1] = value;
			}
		} else if(this.objects == null) {
			let _g = new haxe_ds_ObjectMap();
			_g.set(key,value);
			this.objects = _g;
		} else {
			this.objects.set(key,value);
		}
	}
	get(key) {
		if(blok_diffing_Key.isString(key)) {
			let key1 = key;
			if(this.strings == null) {
				return null;
			} else {
				return this.strings.h[key1];
			}
		} else if(this.objects == null) {
			return null;
		} else {
			return this.objects.h[key.__id__];
		}
	}
	remove(key) {
		if(blok_diffing_Key.isString(key) && this.strings != null) {
			let key1 = key;
			let _this = this.strings;
			if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
				delete(_this.h[key1]);
			}
		} else if(this.objects != null) {
			this.objects.remove(key);
		}
	}
	isNotEmpty() {
		if(this.strings == null && this.objects == null) {
			return false;
		}
		let notEmpty = this.strings != null && Lambda.count(this.strings) > 0;
		if(!notEmpty) {
			notEmpty = this.objects != null && Lambda.count(this.objects) > 0;
		}
		return notEmpty;
	}
	each(fn) {
		if(this.strings != null) {
			let h = this.strings.h;
			let _g_keys = Object.keys(h);
			let _g_length = _g_keys.length;
			let _g_current = 0;
			while(_g_current < _g_length) {
				let key = _g_keys[_g_current++];
				let _g_value = h[key];
				fn(key,_g_value);
			}
		}
		if(this.objects != null) {
			let this1 = this.objects;
			let _g_keys = this1.keys();
			while(_g_keys.hasNext()) {
				let key = _g_keys.next();
				let _g_value = this1.get(key);
				fn(key,_g_value);
			}
		}
	}
}
blok_diffing_KeyMap.__name__ = "blok.diffing.KeyMap";
Object.assign(blok_diffing_KeyMap.prototype, {
	__class__: blok_diffing_KeyMap
});
function blok_html_Client_hydrate(el,child) {
	let adaptor = new blok_html_client_ClientAdaptor();
	let root = blok_ui_RootComponent.node({ target : el, child : child, adaptor : adaptor});
	let component = root.createComponent();
	component.hydrate(adaptor.createCursor(el),null,null);
	return component;
}
class haxe_IMap {
}
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
Object.assign(haxe_IMap.prototype, {
	__class__: haxe_IMap
});
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
	get(key) {
		return this.h[key];
	}
	keys() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	iterator() {
		return new haxe_ds__$StringMap_StringMapValueIterator(this.h);
	}
}
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
});
function blok_html_TagCollection_getTypeForTag(tag) {
	let id = blok_html_TagCollection_tags.h[tag];
	if(id == null) {
		id = kit_UniqueId.uid++;
		blok_html_TagCollection_tags.h[tag] = id;
	}
	return id;
}
class blok_html_Html {
	static button(props,...children) {
		return new blok_ui_VRealNode(blok_html_Html.__componentType_button,"button",props,children.slice(),props.key);
	}
	static div(props,...children) {
		return new blok_ui_VRealNode(blok_html_Html.__componentType_div,"div",props,children.slice(),props.key);
	}
	static span(props,...children) {
		return new blok_ui_VRealNode(blok_html_Html.__componentType_span,"span",props,children.slice(),props.key);
	}
}
blok_html_Html.__name__ = "blok.html.Html";
class blok_html_client_ClientAdaptor {
	constructor() {
		this.scheduler = new blok_core_Scheduler();
	}
	createNode(name,initialAttrs) {
		if(name.startsWith("svg:")) {
			let tmp = HxOverrides.substr(name,4,null);
			return window.document.createElementNS("http://www.w3.org/2000/svg",tmp);
		} else {
			return window.document.createElement(name);
		}
	}
	createTextNode(value) {
		return window.document.createTextNode(value);
	}
	createContainerNode(props) {
		return this.createNode("div",props);
	}
	createPlaceholderNode() {
		return this.createTextNode("");
	}
	createCursor(object) {
		return new blok_html_client_ClientCursor(object);
	}
	updateTextNode(object,value) {
		object.textContent = value;
	}
	updateNodeAttribute(object,name,oldValue,value,isHydrating) {
		let el = object;
		let isSvg = el.namespaceURI == "http://www.w3.org/2000/svg";
		if(isHydrating == true) {
			name = this.getHtmlName(name);
			if(name.startsWith("on")) {
				let name1 = name.toLowerCase();
				if(value == null) {
					el[name1] = null;
				} else {
					el[name1] = value;
				}
			}
			return;
		}
		switch(name) {
		case "checked":case "selected":case "value":
			if(!isSvg) {
				el[name] = value;
			} else if(!isSvg && value != null && name in el) {
				el[name] = value;
			} else {
				name = this.getHtmlName(name);
				if(name.startsWith("on")) {
					let name1 = name.toLowerCase();
					if(value == null) {
						el[name1] = null;
					} else {
						el[name1] = value;
					}
				} else if(value == null || typeof(value) == "boolean" && value == false) {
					el.removeAttribute(name);
				} else if(typeof(value) == "boolean" && value == true) {
					el.setAttribute(name,name);
				} else {
					el.setAttribute(name,value);
				}
			}
			break;
		case "class":case "className":
			let tmp = oldValue;
			let _this = Std.string(tmp != null ? tmp : "").split(" ");
			let _g = [];
			let _g1 = 0;
			while(_g1 < _this.length) {
				let v = _this[_g1];
				++_g1;
				if(v != null && v != "") {
					_g.push(v);
				}
			}
			let tmp1 = value;
			let _this1 = Std.string(tmp1 != null ? tmp1 : "").split(" ");
			let _g2 = [];
			let _g3 = 0;
			while(_g3 < _this1.length) {
				let v = _this1[_g3];
				++_g3;
				if(v != null && v != "") {
					_g2.push(v);
				}
			}
			let _g4 = 0;
			while(_g4 < _g.length) {
				let name = _g[_g4];
				++_g4;
				if(!_g2.includes(name)) {
					el.classList.remove(name);
				} else {
					HxOverrides.remove(_g2,name);
				}
			}
			if(_g2.length > 0) {
				el.classList.add(..._g2);
			}
			break;
		case "dataset":
			if(!isSvg && value != null && name in el) {
				el[name] = value;
			} else {
				let map = value;
				let h = map.h;
				let _g_keys = Object.keys(h);
				let _g_length = _g_keys.length;
				let _g_current = 0;
				while(_g_current < _g_length) {
					let key = _g_keys[_g_current++];
					let _g_value = h[key];
					if(_g_value == null) {
						Reflect.deleteField(el.dataset,key);
					} else {
						el.dataset[key] = _g_value;
					}
				}
			}
			break;
		case "xmlns":
			if(!isSvg) {
				if(!isSvg && value != null && name in el) {
					el[name] = value;
				} else {
					name = this.getHtmlName(name);
					if(name.startsWith("on")) {
						let name1 = name.toLowerCase();
						if(value == null) {
							el[name1] = null;
						} else {
							el[name1] = value;
						}
					} else if(value == null || typeof(value) == "boolean" && value == false) {
						el.removeAttribute(name);
					} else if(typeof(value) == "boolean" && value == true) {
						el.setAttribute(name,name);
					} else {
						el.setAttribute(name,value);
					}
				}
			}
			break;
		default:
			if(!isSvg && value != null && name in el) {
				el[name] = value;
			} else {
				name = this.getHtmlName(name);
				if(name.startsWith("on")) {
					let name1 = name.toLowerCase();
					if(value == null) {
						el[name1] = null;
					} else {
						el[name1] = value;
					}
				} else if(value == null || typeof(value) == "boolean" && value == false) {
					el.removeAttribute(name);
				} else if(typeof(value) == "boolean" && value == true) {
					el.setAttribute(name,name);
				} else {
					el.setAttribute(name,value);
				}
			}
		}
	}
	getHtmlName(name) {
		if(name.startsWith("aria")) {
			return "aria-" + HxOverrides.substr(name,4,null).toLowerCase();
		}
		return name;
	}
	insertNode(object,slot,findParent) {
		let el = object;
		if(slot != null && slot.previous != null) {
			let relative = slot.previous.getRealNode();
			relative.after(el);
		} else {
			let parent = findParent();
			if(parent == null) {
				throw new blok_core_BlokException("Failed assertion: parent != null");
			}
			parent.prepend(el);
		}
	}
	moveNode(object,from,to,findParent) {
		let el = object;
		if(to == null) {
			if(from != null) {
				this.removeNode(object,from);
			}
			return;
		}
		if(to.previous == null) {
			if(to.index != 0) {
				throw new blok_core_BlokException("Failed assertion: to.index == 0");
			}
			let parent = findParent();
			if(parent == null) {
				throw new blok_core_BlokException("Failed assertion: parent != null");
			}
			parent.prepend(el);
			return;
		}
		let relative = to.previous.getRealNode();
		if(relative == null) {
			throw new blok_core_BlokException("Failed assertion: relative != null");
		}
		relative.after(el);
	}
	removeNode(object,slot) {
		object.remove();
	}
	schedule(effect) {
		this.scheduler.schedule(effect);
	}
}
blok_html_client_ClientAdaptor.__name__ = "blok.html.client.ClientAdaptor";
blok_html_client_ClientAdaptor.__interfaces__ = [blok_adaptor_Adaptor];
Object.assign(blok_html_client_ClientAdaptor.prototype, {
	__class__: blok_html_client_ClientAdaptor
});
class blok_html_client_ClientCursor {
	constructor(node) {
		this.node = node;
	}
	current() {
		if(this.node != null && this.node.nodeType == 8) {
			this.next();
		}
		return this.node;
	}
	next() {
		if(this.node == null) {
			return;
		}
		this.node = this.node.nextSibling;
		if(this.node != null && this.node.nodeType == 8) {
			this.next();
		}
	}
	currentChildren() {
		if(this.node == null) {
			return new blok_html_client_ClientCursor(null);
		}
		return new blok_html_client_ClientCursor(this.node.firstChild);
	}
}
blok_html_client_ClientCursor.__name__ = "blok.html.client.ClientCursor";
blok_html_client_ClientCursor.__interfaces__ = [blok_adaptor_Cursor];
Object.assign(blok_html_client_ClientCursor.prototype, {
	__class__: blok_html_client_ClientCursor
});
class blok_signal_Node {
}
blok_signal_Node.__name__ = "blok.signal.Node";
blok_signal_Node.__isInterface__ = true;
blok_signal_Node.__interfaces__ = [blok_core_Disposable];
Object.assign(blok_signal_Node.prototype, {
	__class__: blok_signal_Node
});
class blok_signal_ConsumerNode {
}
blok_signal_ConsumerNode.__name__ = "blok.signal.ConsumerNode";
blok_signal_ConsumerNode.__isInterface__ = true;
blok_signal_ConsumerNode.__interfaces__ = [blok_signal_Node];
Object.assign(blok_signal_ConsumerNode.prototype, {
	__class__: blok_signal_ConsumerNode
});
class blok_signal_Observer {
	constructor(handler) {
		if(blok_signal_Observer._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(handler);
	}
	_hx_constructor(handler) {
		this.status = 0;
		this.version = 0;
		this.disposables = new blok_core_DisposableCollection();
		this.producers = new haxe_ds_IntMap();
		this.id = kit_UniqueId.uid++;
		this.handler = handler;
		let _g = blok_signal_Graph_currentOwner;
		switch(_g._hx_index) {
		case 0:
			_g.value.addDisposable(this);
			break;
		case 1:
			console.log("../blok.core/src/blok/signal/Observer.hx:58:","Creating an Observer without an owner means it may never get disposed");
			break;
		}
		this.validate();
	}
	isInactive() {
		return this.status == 1;
	}
	invalidate() {
		switch(this.status) {
		case 0:case 2:
			this.status = 3;
			blok_signal_Graph_enqueueConsumer(this);
			break;
		case 1:case 3:
			break;
		case 4:
			throw new blok_core_BlokException("Cycle detected");
		}
	}
	validate() {
		switch(this.status) {
		case 1:case 2:
			return;
		case 3:
			if(!this.pollProducers()) {
				this.status = 2;
				return;
			}
			break;
		case 4:
			throw new blok_core_BlokException("Cycle detected");
		default:
		}
		let prevConsumer = blok_signal_Graph_setCurrentConsumer(kit_Maybe.Some(this));
		let prevOwner = blok_signal_Graph_setCurrentOwner(kit_Maybe.Some(this.disposables));
		let err = null;
		this.status = 4;
		this.unbindAll();
		try {
			this.handler();
		} catch( _g ) {
			err = haxe_Exception.caught(_g);
		}
		this.status = 2;
		this.version++;
		blok_signal_Graph_setCurrentConsumer(prevConsumer);
		blok_signal_Graph_setCurrentOwner(prevOwner);
		if(err != null) {
			throw haxe_Exception.thrown(err);
		}
	}
	getVersion() {
		return this.version;
	}
	pollProducers() {
		let link = this.producers.iterator();
		while(link.hasNext()) {
			let link1 = link.next();
			if(link1.lastSeenVersion < link1.node.getVersion()) {
				return true;
			}
		}
		return false;
	}
	bindProducer(node) {
		let this1 = this.producers;
		let key = node.id;
		let value = { lastSeenVersion : node.getVersion(), node : node};
		this1.h[key] = value;
	}
	unbindProducer(node) {
		this.producers.remove(node.id);
	}
	unbindAll() {
		let producer = this.producers.iterator();
		while(producer.hasNext()) {
			let producer1 = producer.next();
			producer1.node.unbindConsumer(this);
		}
		this.producers.h = { };
	}
	dispose() {
		if(this.isInactive()) {
			return;
		}
		this.disposables.dispose();
		this.status = 1;
		this.unbindAll();
	}
}
blok_signal_Observer.__name__ = "blok.signal.Observer";
blok_signal_Observer.__interfaces__ = [blok_signal_ConsumerNode];
Object.assign(blok_signal_Observer.prototype, {
	__class__: blok_signal_Observer
});
class blok_signal_ProducerNode {
}
blok_signal_ProducerNode.__name__ = "blok.signal.ProducerNode";
blok_signal_ProducerNode.__isInterface__ = true;
blok_signal_ProducerNode.__interfaces__ = [blok_signal_Node];
Object.assign(blok_signal_ProducerNode.prototype, {
	__class__: blok_signal_ProducerNode
});
class blok_signal_ComputationObject extends blok_signal_Observer {
	constructor(computation,equals) {
		blok_signal_Observer._hx_skip_constructor = true;
		super();
		blok_signal_Observer._hx_skip_constructor = false;
		this._hx_constructor(computation,equals);
	}
	_hx_constructor(computation,equals) {
		this.value = kit_Maybe.None;
		this.consumers = new haxe_ds_List();
		this.equals = equals != null ? equals : function(a,b) {
			return a == b;
		};
		let _gthis = this;
		super._hx_constructor(function() {
			let newValue = computation();
			let _g = _gthis.value;
			switch(_g._hx_index) {
			case 0:
				if(!_gthis.equals(_g.value,newValue)) {
					_gthis.version++;
					_gthis.value = kit_Maybe.Some(newValue);
					_gthis.notify();
				}
				break;
			case 1:
				_gthis.value = kit_Maybe.Some(newValue);
				break;
			}
		});
	}
	get() {
		if(this.isInactive()) {
			let _g = this.value;
			switch(_g._hx_index) {
			case 0:
				return _g.value;
			case 1:
				throw new blok_core_BlokException("Value was not initialized");
			}
		}
		let _g = blok_signal_Graph_currentConsumer;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.value;
			if(_g1 == this) {
				throw new blok_core_BlokException("Cannot observe self");
			} else {
				_g1.bindProducer(this);
				this.bindConsumer(_g1);
			}
			break;
		case 1:
			break;
		}
		let _g2 = this.value;
		switch(_g2._hx_index) {
		case 0:
			return _g2.value;
		case 1:
			throw new blok_core_BlokException("Value was not initialized");
		}
	}
	peek() {
		let _g = this.value;
		switch(_g._hx_index) {
		case 0:
			return _g.value;
		case 1:
			throw new blok_core_BlokException("Value was not initialized");
		}
	}
	notify() {
		let _g_head = this.consumers.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			if(val.isInactive()) {
				this.consumers.remove(val);
			} else {
				val.invalidate();
			}
		}
	}
	bindConsumer(consumer) {
		if(Lambda.exists(this.consumers,function(node) {
			return node.id == consumer.id;
		})) {
			return;
		}
		this.consumers.push(consumer);
	}
	unbindConsumer(consumer) {
		this.consumers.remove(consumer);
	}
	dispose() {
		super.dispose();
		let _g_head = this.consumers.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			this.unbindConsumer(val);
			val.unbindProducer(this);
		}
	}
}
blok_signal_ComputationObject.__name__ = "blok.signal.ComputationObject";
blok_signal_ComputationObject.__interfaces__ = [blok_signal_ProducerNode];
blok_signal_ComputationObject.__super__ = blok_signal_Observer;
Object.assign(blok_signal_ComputationObject.prototype, {
	__class__: blok_signal_ComputationObject
});
var kit_Maybe = $hxEnums["kit.Maybe"] = { __ename__:true,__constructs__:null
	,Some: ($_=function(value) { return {_hx_index:0,value:value,__enum__:"kit.Maybe",toString:$estr}; },$_._hx_name="Some",$_.__params__ = ["value"],$_)
	,None: {_hx_name:"None",_hx_index:1,__enum__:"kit.Maybe",toString:$estr}
};
kit_Maybe.__constructs__ = [kit_Maybe.Some,kit_Maybe.None];
class haxe_ds_List {
	constructor() {
		this.length = 0;
	}
	add(item) {
		let x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	push(item) {
		let x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	remove(v) {
		let prev = null;
		let l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	iterator() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
}
haxe_ds_List.__name__ = "haxe.ds.List";
Object.assign(haxe_ds_List.prototype, {
	__class__: haxe_ds_List
});
function blok_signal_Graph_withOwner(owner,cb) {
	let prev = blok_signal_Graph_setCurrentOwner(kit_Maybe.Some(owner));
	try {
		cb();
	} catch( _g ) {
		let _g1 = haxe_Exception.caught(_g);
		blok_signal_Graph_setCurrentOwner(prev);
		throw haxe_Exception.thrown(_g1);
	}
	blok_signal_Graph_setCurrentOwner(prev);
}
function blok_signal_Graph_withOwnedValue(owner,cb) {
	let prev = blok_signal_Graph_setCurrentOwner(kit_Maybe.Some(owner));
	let value;
	try {
		value = cb();
	} catch( _g ) {
		let _g1 = haxe_Exception.caught(_g);
		blok_signal_Graph_setCurrentOwner(prev);
		throw haxe_Exception.thrown(_g1);
	}
	blok_signal_Graph_setCurrentOwner(prev);
	return value;
}
function blok_signal_Graph_setCurrentOwner(owner) {
	let prev = blok_signal_Graph_currentOwner;
	blok_signal_Graph_currentOwner = owner;
	return prev;
}
function blok_signal_Graph_setCurrentConsumer(consumer) {
	let prev = blok_signal_Graph_currentConsumer;
	blok_signal_Graph_currentConsumer = consumer;
	return prev;
}
function blok_signal_Graph_enqueueConsumer(node) {
	if(!Lambda.has(blok_signal_Graph_pending,node)) {
		blok_signal_Graph_pending.add(node);
	}
	blok_signal_Graph_validateConsumers();
}
function blok_signal_Graph_validateConsumers() {
	if(blok_signal_Graph_depth > 0) {
		return;
	}
	let _g_head = blok_signal_Graph_pending.h;
	while(_g_head != null) {
		let val = _g_head.item;
		_g_head = _g_head.next;
		blok_signal_Graph_pending.remove(val);
		val.validate();
	}
}
function blok_signal_Graph_batch(compute) {
	blok_signal_Graph_depth++;
	compute();
	blok_signal_Graph_depth--;
	blok_signal_Graph_validateConsumers();
}
function blok_signal_Graph_untrackValue(compute) {
	let prev = blok_signal_Graph_setCurrentConsumer(kit_Maybe.None);
	let value = compute();
	blok_signal_Graph_setCurrentConsumer(prev);
	return value;
}
class blok_signal_Signal {
	static ofValue(value) {
		return new blok_signal_SignalObject(value);
	}
}
class blok_signal_SignalObject {
	constructor(value,equals) {
		this.consumers = new haxe_ds_List();
		this.version = 0;
		this.isDisposed = false;
		this.id = kit_UniqueId.uid++;
		this.value = value;
		this.equals = equals != null ? equals : function(a,b) {
			return a == b;
		};
		let _g = blok_signal_Graph_currentOwner;
		switch(_g._hx_index) {
		case 0:
			_g.value.addDisposable(this);
			break;
		case 1:
			break;
		}
	}
	getVersion() {
		return this.version;
	}
	set(newValue) {
		if(this.isDisposed) {
			console.log("../blok.core/src/blok/signal/Signal.hx:55:","Attempted to set a disposed signal");
			return this.value;
		}
		if(this.equals(this.value,newValue)) {
			return this.value;
		}
		this.value = newValue;
		this.version++;
		this.notify();
		return this.value;
	}
	get() {
		if(this.isDisposed) {
			return this.value;
		}
		let _g = blok_signal_Graph_currentConsumer;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.value;
			_g1.bindProducer(this);
			this.bindConsumer(_g1);
			break;
		case 1:
			break;
		}
		return this.value;
	}
	update(updater) {
		return this.set(updater(this.peek()));
	}
	peek() {
		return this.value;
	}
	notify() {
		let _g_head = this.consumers.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			if(val.isInactive()) {
				this.consumers.remove(val);
			} else {
				val.invalidate();
			}
		}
	}
	bindConsumer(consumer) {
		if(Lambda.exists(this.consumers,function(node) {
			return node.id == consumer.id;
		})) {
			return;
		}
		this.consumers.push(consumer);
	}
	unbindConsumer(consumer) {
		this.consumers.remove(consumer);
	}
	isInactive() {
		return this.isDisposed;
	}
	dispose() {
		if(this.isDisposed) {
			return;
		}
		this.isDisposed = true;
		let _g_head = this.consumers.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			this.unbindConsumer(val);
			val.unbindProducer(this);
		}
	}
}
blok_signal_SignalObject.__name__ = "blok.signal.SignalObject";
blok_signal_SignalObject.__interfaces__ = [blok_signal_ProducerNode];
Object.assign(blok_signal_SignalObject.prototype, {
	__class__: blok_signal_SignalObject
});
class blok_suspense_Resource {
	static _new(fetch) {
		return new blok_suspense_DefaultResourceObject(fetch);
	}
}
var blok_suspense_ResourceStatus = $hxEnums["blok.suspense.ResourceStatus"] = { __ename__:true,__constructs__:null
	,Loading: {_hx_name:"Loading",_hx_index:0,__enum__:"blok.suspense.ResourceStatus",toString:$estr}
	,Loaded: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"blok.suspense.ResourceStatus",toString:$estr}; },$_._hx_name="Loaded",$_.__params__ = ["value"],$_)
	,Error: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"blok.suspense.ResourceStatus",toString:$estr}; },$_._hx_name="Error",$_.__params__ = ["e"],$_)
};
blok_suspense_ResourceStatus.__constructs__ = [blok_suspense_ResourceStatus.Loading,blok_suspense_ResourceStatus.Loaded,blok_suspense_ResourceStatus.Error];
class blok_suspense_ResourceObject {
}
blok_suspense_ResourceObject.__name__ = "blok.suspense.ResourceObject";
blok_suspense_ResourceObject.__isInterface__ = true;
blok_suspense_ResourceObject.__interfaces__ = [blok_core_Disposable];
Object.assign(blok_suspense_ResourceObject.prototype, {
	__class__: blok_suspense_ResourceObject
});
class blok_suspense_DefaultResourceObject {
	constructor(fetch) {
		this.first = true;
		this.link = null;
		this.currentFetch = new blok_signal_SignalObject(kit_Maybe.None);
		this.disposables = new blok_core_DisposableCollection();
		this.fetch = null;
		let prevOwner = blok_signal_Graph_setCurrentOwner(kit_Maybe.Some(this.disposables));
		this.data = new blok_signal_SignalObject(blok_suspense_ResourceStatus.Loading);
		let transform = function(status) {
			return status == blok_suspense_ResourceStatus.Loading;
		};
		let _gthis = this.data;
		this.loading = new blok_signal_ComputationObject(function() {
			return transform(_gthis.get());
		},null);
		this.fetch = fetch;
		let _gthis1 = this;
		new blok_signal_Observer(function() {
			let handled = false;
			let _g = _gthis1.currentFetch.get();
			switch(_g._hx_index) {
			case 0:
				let tmp = _gthis1.link;
				if(tmp != null) {
					tmp.cancel();
				}
				_gthis1.link = _g.value.handle(function(result) {
					switch(result._hx_index) {
					case 0:
						handled = true;
						_gthis1.data.set(blok_suspense_ResourceStatus.Loaded(result.value));
						break;
					case 1:
						handled = true;
						_gthis1.data.set(blok_suspense_ResourceStatus.Error(result.error));
						break;
					}
				});
				break;
			case 1:
				let tmp1 = _gthis1.link;
				if(tmp1 != null) {
					tmp1.cancel();
				}
				_gthis1.link = null;
				break;
			}
			if(!handled) {
				_gthis1.data.set(blok_suspense_ResourceStatus.Loading);
			}
		});
		blok_signal_Graph_setCurrentOwner(prevOwner);
	}
	get() {
		let _gthis = this;
		if(this.first) {
			this.first = false;
			blok_signal_Graph_withOwner(this.disposables,function() {
				new blok_signal_Observer(function() {
					_gthis.currentFetch.set(kit_Maybe.Some(_gthis.fetch()));
				});
			});
		}
		let _g = this.data.get();
		switch(_g._hx_index) {
		case 0:
			throw new blok_suspense_SuspenseException(kit_MaybeTools.unwrap(this.currentFetch.peek()));
		case 1:
			return _g.value;
		case 2:
			throw haxe_Exception.thrown(_g.e);
		}
	}
	dispose() {
		let tmp = this.link;
		if(tmp != null) {
			tmp.cancel();
		}
		this.link = null;
		this.disposables.dispose();
	}
}
blok_suspense_DefaultResourceObject.__name__ = "blok.suspense.DefaultResourceObject";
blok_suspense_DefaultResourceObject.__interfaces__ = [blok_suspense_ResourceObject];
Object.assign(blok_suspense_DefaultResourceObject.prototype, {
	__class__: blok_suspense_DefaultResourceObject
});
var blok_suspense_SuspenseBoundaryStatus = $hxEnums["blok.suspense.SuspenseBoundaryStatus"] = { __ename__:true,__constructs__:null
	,Ok: {_hx_name:"Ok",_hx_index:0,__enum__:"blok.suspense.SuspenseBoundaryStatus",toString:$estr}
	,Suspended: ($_=function(links) { return {_hx_index:1,links:links,__enum__:"blok.suspense.SuspenseBoundaryStatus",toString:$estr}; },$_._hx_name="Suspended",$_.__params__ = ["links"],$_)
};
blok_suspense_SuspenseBoundaryStatus.__constructs__ = [blok_suspense_SuspenseBoundaryStatus.Ok,blok_suspense_SuspenseBoundaryStatus.Suspended];
class blok_suspense_SuspenseBoundary extends blok_ui_ComponentBase {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.currentChild = null;
		this.realChild = null;
		this.hiddenSlot = null;
		this.hiddenRoot = null;
		this.suspenseStatus = blok_suspense_SuspenseBoundaryStatus.Ok;
		this.hydrating = false;
		super._hx_constructor();
		this.__node = node;
		let props = this.__node.getProps();
		this.child = props.child;
		this.fallback = props.fallback;
		let tmp = props.overridable;
		this.overridable = tmp != null && tmp;
		this.onComplete = props.onComplete;
		this.onSuspended = props.onSuspended;
	}
	updateProps() {
		let props = this.__node.getProps();
		let changed = 0;
		if(this.child != props.child) {
			this.child = props.child;
			changed = 1;
		}
		if(this.fallback != props.fallback) {
			this.fallback = props.fallback;
			++changed;
		}
		if(this.onComplete != props.onComplete) {
			this.onComplete = props.onComplete;
			++changed;
		}
		if(this.onSuspended != props.onSuspended) {
			this.onSuspended = props.onSuspended;
			++changed;
		}
		let tmp = props.overridable;
		let newSuspension = tmp != null && tmp;
		if(this.overridable != newSuspension) {
			this.overridable = newSuspension;
			++changed;
		}
		return changed > 0;
	}
	setActiveChild() {
		switch(this.suspenseStatus._hx_index) {
		case 0:
			if(this.currentChild != this.realChild) {
				let tmp = this.currentChild;
				if(tmp != null) {
					tmp.dispose();
				}
				this.currentChild = this.realChild;
				this.realChild.updateSlot(this.__slot);
			} else {
				this.realChild.updateSlot(this.__slot);
			}
			break;
		case 1:
			if(this.currentChild == this.realChild) {
				this.realChild.updateSlot(this.hiddenSlot);
				this.currentChild = this.fallback().createComponent();
				this.currentChild.mount(this,this.__slot);
			}
			break;
		}
	}
	setupHiddenRoot() {
		this.hiddenRoot = blok_ui_RootComponent.node({ target : this.getAdaptor().createContainerNode({ }), child : function() {
			return blok_ui_Placeholder.node();
		}, adaptor : this.getAdaptor()}).createComponent();
		this.hiddenRoot.mount(null,null);
		this.hiddenSlot = this.createSlot(1,kit_MaybeTools.unwrap(this.hiddenRoot.findChildOfType(blok_ui_Placeholder)));
	}
	handle(component,object) {
		if(!((object) instanceof blok_suspense_SuspenseException)) {
			blok_boundary_BoundaryTools_tryToHandleWithBoundary(this,object);
			return;
		}
		if(this.hydrating) {
			throw new blok_core_BlokComponentException("SuspenseBoundary suspended during hydration.",this);
		}
		if(this.overridable) {
			let _g = blok_suspense_SuspenseBoundary.maybeFrom(this);
			switch(_g._hx_index) {
			case 0:
				_g.value.handle(component,object);
				return;
			case 1:
				break;
			}
		}
		let suspense = object;
		let link = null;
		let _g = this.suspenseStatus;
		let tmp;
		switch(_g._hx_index) {
		case 0:
			this.triggerOnSuspended();
			link = new blok_suspense_SuspenseLink(component,this);
			component.addDisposable(link);
			tmp = blok_suspense_SuspenseBoundaryStatus.Suspended([link]);
			break;
		case 1:
			let _g1 = _g.links;
			link = Lambda.find(_g1,function(link) {
				return link.component == component;
			});
			if(link == null) {
				link = new blok_suspense_SuspenseLink(component,this);
				component.addDisposable(link);
				_g1.push(link);
			}
			tmp = blok_suspense_SuspenseBoundaryStatus.Suspended(_g1);
			break;
		}
		this.suspenseStatus = tmp;
		this.setActiveChild();
		if(link == null) {
			throw new blok_core_BlokComponentException("Failed assertion: link != null",this);
		}
		let _gthis = this;
		link.set(suspense.task.handle(function(result) {
			switch(result._hx_index) {
			case 0:
				switch(_gthis.__status) {
				case 4:case 5:
					return;
				default:
				}
				_gthis.resolveAndRemoveSuspenseLink(link);
				break;
			case 1:
				let _g = result.error;
				switch(_gthis.__status) {
				case 4:case 5:
					return;
				default:
				}
				blok_boundary_BoundaryTools_tryToHandleWithBoundary(_gthis,_g);
				break;
			}
		}));
	}
	resolveAndRemoveSuspenseLink(link) {
		let _g = this.suspenseStatus;
		let tmp;
		switch(_g._hx_index) {
		case 0:
			tmp = blok_suspense_SuspenseBoundaryStatus.Ok;
			break;
		case 1:
			let _g1 = _g.links;
			HxOverrides.remove(_g1,link);
			link.component.removeDisposable(link);
			tmp = _g1.length == 0 ? blok_suspense_SuspenseBoundaryStatus.Ok : blok_suspense_SuspenseBoundaryStatus.Suspended(_g1);
			break;
		}
		this.suspenseStatus = tmp;
		if(this.suspenseStatus == blok_suspense_SuspenseBoundaryStatus.Ok) {
			this.setActiveChild();
			this.getAdaptor().schedule($bind(this,this.triggerOnComplete));
		}
	}
	triggerOnSuspended() {
		if(this.onSuspended != null) {
			this.onSuspended();
		}
		let _g = blok_suspense_SuspenseBoundaryContext.maybeFrom(this);
		switch(_g._hx_index) {
		case 0:
			_g.value.add(this);
			break;
		case 1:
			break;
		}
	}
	triggerOnComplete() {
		if(this.onComplete != null) {
			this.onComplete();
		}
		let _g = blok_suspense_SuspenseBoundaryContext.maybeFrom(this);
		switch(_g._hx_index) {
		case 0:
			_g.value.remove(this);
			break;
		case 1:
			break;
		}
	}
	__initialize() {
		this.setupHiddenRoot();
		this.currentChild = this.realChild = this.child.createComponent();
		this.realChild.mount(this,this.__slot);
		this.setActiveChild();
	}
	__hydrate(cursor) {
		this.hydrating = true;
		this.setupHiddenRoot();
		this.currentChild = this.realChild = this.child.createComponent();
		this.realChild.hydrate(cursor,this,this.__slot);
		this.hydrating = false;
	}
	__update() {
		if(!this.updateProps()) {
			return;
		}
		this.realChild.update(this.child);
		this.setActiveChild();
	}
	__validate() {
		this.setActiveChild();
	}
	__dispose() {
		let _g = blok_suspense_SuspenseBoundaryContext.maybeFrom(this);
		switch(_g._hx_index) {
		case 0:
			_g.value.remove(this);
			break;
		case 1:
			break;
		}
		let tmp = this.hiddenRoot;
		if(tmp != null) {
			tmp.dispose();
		}
		this.hiddenRoot = null;
		this.hiddenSlot = null;
		this.realChild.dispose();
		if(this.currentChild != this.realChild) {
			let tmp = this.currentChild;
			if(tmp != null) {
				tmp.dispose();
			}
		}
		this.currentChild = null;
	}
	__updateSlot(oldSlot,newSlot) {
		let tmp = this.currentChild;
		if(tmp != null) {
			tmp.updateSlot(newSlot);
		}
	}
	getRealNode() {
		if(this.currentChild == null) {
			throw new blok_core_BlokComponentException("Failed assertion: currentChild != null",this);
		}
		return this.currentChild.getRealNode();
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_suspense_SuspenseBoundary.componentType;
	}
	visitChildren(visitor) {
		if(this.currentChild != null) {
			visitor(this.currentChild);
		}
	}
	static maybeFrom(context) {
		return context.findAncestorOfType(blok_suspense_SuspenseBoundary);
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_suspense_SuspenseBoundary.componentType,props,function(node) {
			return new blok_suspense_SuspenseBoundary(node);
		},key);
	}
}
blok_suspense_SuspenseBoundary.__name__ = "blok.suspense.SuspenseBoundary";
blok_suspense_SuspenseBoundary.__interfaces__ = [blok_boundary_Boundary];
blok_suspense_SuspenseBoundary.__super__ = blok_ui_ComponentBase;
Object.assign(blok_suspense_SuspenseBoundary.prototype, {
	__class__: blok_suspense_SuspenseBoundary
});
class blok_suspense_SuspenseLink {
	constructor(component,suspense) {
		this.link = null;
		this.component = component;
		this.suspense = suspense;
	}
	set(newLink) {
		let tmp = this.link;
		if(tmp != null) {
			tmp.cancel();
		}
		this.link = newLink;
	}
	dispose() {
		let tmp = this.link;
		if(tmp != null) {
			tmp.cancel();
		}
		this.link = null;
		this.suspense.resolveAndRemoveSuspenseLink(this);
	}
}
blok_suspense_SuspenseLink.__name__ = "blok.suspense.SuspenseLink";
blok_suspense_SuspenseLink.__interfaces__ = [blok_core_Disposable];
Object.assign(blok_suspense_SuspenseLink.prototype, {
	__class__: blok_suspense_SuspenseLink
});
class blok_suspense_SuspenseBoundaryContext {
	constructor(props) {
		this.suspendedBoundaries = [];
		this.onSuspended = new kit_Event_$0();
		this.onComplete = new kit_Event_$0();
		if((props != null ? props.onComplete : null) != null) {
			this.onComplete.add(props.onComplete);
		}
		if((props != null ? props.onSuspended : null) != null) {
			this.onSuspended.add(props.onSuspended);
		}
	}
	add(boundary) {
		if(this.suspendedBoundaries.includes(boundary)) {
			return;
		}
		if(this.suspendedBoundaries.length == 0) {
			this.onSuspended.dispatch();
		}
		this.suspendedBoundaries.push(boundary);
	}
	remove(boundary) {
		if(!this.suspendedBoundaries.includes(boundary)) {
			return;
		}
		HxOverrides.remove(this.suspendedBoundaries,boundary);
		if(this.suspendedBoundaries.length == 0) {
			this.onComplete.dispatch();
		}
	}
	dispose() {
		this.onComplete.cancel();
		this.onSuspended.cancel();
	}
	getContextId() {
		return blok_suspense_SuspenseBoundaryContext.__contextId;
	}
	static maybeFrom(context) {
		return kit_MaybeTools.flatMap(context.findAncestor(function(ancestor) {
			let _g = ((ancestor) instanceof blok_context_Provider) ? ancestor : null;
			if(_g == null) {
				return false;
			} else {
				let provider = _g;
				return provider.match(blok_suspense_SuspenseBoundaryContext.__contextId);
			}
		}),function(provider) {
			return provider.getContext();
		});
	}
}
blok_suspense_SuspenseBoundaryContext.__name__ = "blok.suspense.SuspenseBoundaryContext";
blok_suspense_SuspenseBoundaryContext.__interfaces__ = [blok_context_Context];
Object.assign(blok_suspense_SuspenseBoundaryContext.prototype, {
	__class__: blok_suspense_SuspenseBoundaryContext
});
class blok_suspense_SuspenseException extends haxe_Exception {
	constructor(task) {
		super("Unhandled suspension");
		this.task = task;
	}
}
blok_suspense_SuspenseException.__name__ = "blok.suspense.SuspenseException";
blok_suspense_SuspenseException.__super__ = haxe_Exception;
Object.assign(blok_suspense_SuspenseException.prototype, {
	__class__: blok_suspense_SuspenseException
});
class blok_ui_Slot {
	constructor(index,previous) {
		this.index = index;
		this.previous = previous;
	}
	changed(other) {
		return this.index != other.index;
	}
}
blok_ui_Slot.__name__ = "blok.ui.Slot";
Object.assign(blok_ui_Slot.prototype, {
	__class__: blok_ui_Slot
});
class blok_ui_Placeholder extends blok_ui_ComponentBase {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.realNode = null;
		super._hx_constructor();
		this.__node = node;
	}
	__initialize() {
		let adaptor = this.getAdaptor();
		this.realNode = adaptor.createPlaceholderNode();
		let _gthis = this;
		adaptor.insertNode(this.realNode,this.__slot,function() {
			return blok_adaptor_RealNodeHostTools_findNearestRealNode(_gthis);
		});
	}
	__hydrate(cursor) {
		this.__initialize();
	}
	__update() {
	}
	__validate() {
	}
	__dispose() {
		this.getAdaptor().removeNode(this.realNode,this.__slot);
	}
	__updateSlot(oldSlot,newSlot) {
		let _gthis = this;
		this.getAdaptor().moveNode(this.getRealNode(),oldSlot,newSlot,function() {
			return blok_adaptor_RealNodeHostTools_findNearestRealNode(_gthis);
		});
	}
	getRealNode() {
		if(this.realNode == null) {
			throw new blok_core_BlokComponentException("Failed assertion: realNode != null",this);
		}
		return this.realNode;
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_ui_Placeholder.componentType;
	}
	visitChildren(visitor) {
	}
	static node(key) {
		return new blok_ui_VComponent(blok_ui_Placeholder.componentType,{ },function(node) {
			return new blok_ui_Placeholder(node);
		},key);
	}
}
blok_ui_Placeholder.__name__ = "blok.ui.Placeholder";
blok_ui_Placeholder.__interfaces__ = [blok_adaptor_RealNodeHost];
blok_ui_Placeholder.__super__ = blok_ui_ComponentBase;
Object.assign(blok_ui_Placeholder.prototype, {
	__class__: blok_ui_Placeholder
});
class blok_ui_RealNodeComponent extends blok_ui_ComponentBase {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.children = [];
		this.realNode = null;
		this.updaters = new haxe_ds_StringMap();
		super._hx_constructor();
		this.tag = node.tag;
		this.type = node.type;
		this.__node = node;
	}
	render() {
		let vn = this.__node;
		let tmp = vn.children;
		let tmp1;
		if(tmp != null) {
			let _g = [];
			let _g1 = 0;
			let _g2 = tmp;
			while(_g1 < _g2.length) {
				let v = _g2[_g1];
				++_g1;
				if(v != null) {
					_g.push(v);
				}
			}
			tmp1 = _g;
		} else {
			tmp1 = null;
		}
		if(tmp1 != null) {
			return tmp1;
		} else {
			return [];
		}
	}
	observeAttributes() {
		let _gthis = this;
		let applyAttribute = function(name,oldValue,value) {
			_gthis.getAdaptor().updateNodeAttribute(_gthis.getRealNode(),name,oldValue,value,_gthis.__renderMode == 1);
		};
		let props = this.__node.getProps();
		let fields = Reflect.fields(props);
		let h = this.updaters.h;
		let name_keys = Object.keys(h);
		let name_length = name_keys.length;
		let name_current = 0;
		while(name_current < name_length) {
			let name = name_keys[name_current++];
			if(!fields.includes(name)) {
				let tmp = this.updaters.h[name];
				if(tmp != null) {
					tmp.dispose();
				}
				let _this = this.updaters;
				if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
					delete(_this.h[name]);
				}
			}
		}
		blok_signal_Graph_withOwner(this,function() {
			let _g = 0;
			while(_g < fields.length) {
				let name = fields[_g];
				++_g;
				let signal = Reflect.field(props,name);
				let updater = _gthis.updaters.h[name];
				if(signal == null) {
					signal = new blok_signal_SignalObject(null);
				}
				if(updater == null) {
					updater = new blok_ui_RealNodePropertyUpdater(name,signal,applyAttribute);
					_gthis.updaters.h[name] = updater;
				} else {
					updater.update(signal);
				}
			}
		});
	}
	__initialize() {
		this.realNode = this.createRealNode();
		this.observeAttributes();
		let nodes = this.render();
		let previous = null;
		let _g = [];
		let _g_current = 0;
		while(_g_current < nodes.length) {
			let _g_value = nodes[_g_current];
			let _g_key = _g_current++;
			let child = _g_value.createComponent();
			child.mount(this,this.createSlot(_g_key,previous));
			previous = child;
			_g.push(child);
		}
		this.children = _g;
		let _gthis = this;
		this.getAdaptor().insertNode(this.realNode,this.__slot,function() {
			return blok_adaptor_RealNodeHostTools_findNearestRealNode(_gthis);
		});
	}
	__hydrate(cursor) {
		this.realNode = cursor.current();
		this.observeAttributes();
		let nodes = this.render();
		let localCursor = cursor.currentChildren();
		let previous = null;
		let _g = [];
		let _g_current = 0;
		while(_g_current < nodes.length) {
			let _g_value = nodes[_g_current];
			let _g_key = _g_current++;
			let child = _g_value.createComponent();
			child.hydrate(localCursor,this,this.createSlot(_g_key,previous));
			previous = child;
			_g.push(child);
		}
		this.children = _g;
		if(localCursor.current() != null) {
			throw new blok_core_BlokComponentException("Failed assertion: localCursor.current() == null",this);
		}
		cursor.next();
	}
	__update() {
		this.observeAttributes();
		this.children = blok_diffing_Differ_diffChildren(this,this.children,this.render());
	}
	__validate() {
		this.children = blok_diffing_Differ_diffChildren(this,this.children,this.render());
	}
	__dispose() {
		let h = this.updaters.h;
		let _g_keys = Object.keys(h);
		let _g_length = _g_keys.length;
		let _g_current = 0;
		while(_g_current < _g_length) {
			let key = _g_keys[_g_current++];
			let _g_value = h[key];
			_g_value.dispose();
		}
		this.updaters.h = Object.create(null);
		this.getAdaptor().removeNode(this.getRealNode(),this.__slot);
	}
	__updateSlot(oldSlot,newSlot) {
		let _gthis = this;
		this.getAdaptor().moveNode(this.getRealNode(),oldSlot,newSlot,function() {
			return blok_adaptor_RealNodeHostTools_findNearestRealNode(_gthis);
		});
	}
	createRealNode() {
		return this.getAdaptor().createNode(this.tag,{ });
	}
	getRealNode() {
		if(this.realNode == null) {
			throw new blok_core_BlokComponentException("Failed assertion: realNode != null",this);
		}
		return this.realNode;
	}
	canBeUpdatedByNode(node) {
		return this.type == node.type;
	}
	visitChildren(visitor) {
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let child = _g1[_g];
			++_g;
			if(!visitor(child)) {
				return;
			}
		}
	}
}
blok_ui_RealNodeComponent.__name__ = "blok.ui.RealNodeComponent";
blok_ui_RealNodeComponent.__interfaces__ = [blok_adaptor_RealNodeHost];
blok_ui_RealNodeComponent.__super__ = blok_ui_ComponentBase;
Object.assign(blok_ui_RealNodeComponent.prototype, {
	__class__: blok_ui_RealNodeComponent
});
class blok_ui_RealNodePropertyUpdater {
	constructor(name,propSignal,setAttribute) {
		this.oldValue = null;
		this.name = name;
		this.changeSignal = new blok_signal_SignalObject(propSignal);
		this.setAttribute = setAttribute;
		let _gthis = this;
		this.observer = new blok_signal_Observer(function() {
			let signal = _gthis.changeSignal.get();
			let value = signal.get();
			if(value == _gthis.oldValue) {
				return;
			}
			setAttribute(name,_gthis.oldValue,value);
			_gthis.oldValue = value;
		});
	}
	update(newSignal) {
		this.changeSignal.set(newSignal);
	}
	dispose() {
		this.changeSignal.dispose();
		this.observer.dispose();
		this.setAttribute(this.name,this.oldValue,null);
	}
}
blok_ui_RealNodePropertyUpdater.__name__ = "blok.ui.RealNodePropertyUpdater";
blok_ui_RealNodePropertyUpdater.__interfaces__ = [blok_core_Disposable];
Object.assign(blok_ui_RealNodePropertyUpdater.prototype, {
	__class__: blok_ui_RealNodePropertyUpdater
});
class blok_ui_RootComponent extends blok_ui_ComponentBase {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.component = null;
		super._hx_constructor();
		this.__node = node;
		let __target = node.getProps();
		let target;
		let child;
		let adaptor;
		target = __target.target;
		child = __target.child;
		adaptor = __target.adaptor;
		this.target = target;
		this.child = child;
		this.__adaptor = adaptor;
	}
	render() {
		let _gthis = this;
		return blok_signal_Graph_withOwnedValue(this,function() {
			return blok_signal_Graph_untrackValue(_gthis.child);
		});
	}
	__initialize() {
		this.component = this.render().createComponent();
		this.component.mount(this,this.createSlot(0,null));
	}
	__hydrate(cursor) {
		this.component = this.render().createComponent();
		this.component.hydrate(cursor.currentChildren(),this,this.createSlot(0,null));
		cursor.next();
	}
	__update() {
	}
	__validate() {
	}
	__dispose() {
	}
	__updateSlot(oldSlot,newSlot) {
		this.component.updateSlot(newSlot);
	}
	getRealNode() {
		return this.target;
	}
	canBeUpdatedByNode(node) {
		return false;
	}
	visitChildren(visitor) {
		if(this.component != null) {
			visitor(this.component);
		}
	}
	static node(props) {
		return new blok_ui_VComponent(blok_ui_RootComponent.componentType,props,function(node) {
			return new blok_ui_RootComponent(node);
		});
	}
}
blok_ui_RootComponent.__name__ = "blok.ui.RootComponent";
blok_ui_RootComponent.__interfaces__ = [blok_adaptor_RealNodeHost];
blok_ui_RootComponent.__super__ = blok_ui_ComponentBase;
Object.assign(blok_ui_RootComponent.prototype, {
	__class__: blok_ui_RootComponent
});
class blok_ui_Scope extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
		let prevOwner = blok_signal_Graph_setCurrentOwner(kit_Maybe.Some(this));
		try {
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g);
			blok_signal_Graph_setCurrentOwner(prevOwner);
			throw haxe_Exception.thrown(_g1);
		}
		blok_signal_Graph_setCurrentOwner(prevOwner);
	}
	render() {
		return (this.get_child())(this);
	}
	get_child() {
		return this.__backing_child.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_child.set(props.child);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_ui_Scope.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_ui_Scope.componentType,props,function(node) {
			return new blok_ui_Scope(node);
		},key);
	}
}
blok_ui_Scope.__name__ = "blok.ui.Scope";
blok_ui_Scope.__super__ = blok_ui_Component;
Object.assign(blok_ui_Scope.prototype, {
	__class__: blok_ui_Scope
});
class blok_ui_Text {
	static ofString(value) {
		return blok_ui_TextComponent.node(value);
	}
	static ofSignal(signal) {
		return blok_ui_Scope.node({ child : function(_) {
			return blok_ui_Text.node(signal.get());
		}});
	}
	static node(value) {
		return blok_ui_Text._new(value);
	}
	static _new(value,key) {
		return blok_ui_TextComponent.node(value,key);
	}
}
class blok_ui_TextComponent extends blok_ui_ComponentBase {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.realNode = null;
		super._hx_constructor();
		this.__node = node;
	}
	__initialize() {
		let adaptor = this.getAdaptor();
		let props = this.__node.getProps();
		this.realNode = adaptor.createTextNode(props.value);
		let _gthis = this;
		adaptor.insertNode(this.realNode,this.__slot,function() {
			return blok_adaptor_RealNodeHostTools_findNearestRealNode(_gthis);
		});
	}
	__hydrate(cursor) {
		this.realNode = cursor.current();
		if(this.realNode == null) {
			throw new blok_core_BlokComponentException("Hydration failed",this);
		}
		cursor.next();
	}
	__update() {
		let adaptor = this.getAdaptor();
		let props = this.__node.getProps();
		adaptor.updateTextNode(this.realNode,props.value);
	}
	__validate() {
		this.__update();
	}
	__dispose() {
		this.getAdaptor().removeNode(this.realNode,this.__slot);
	}
	__updateSlot(oldSlot,newSlot) {
		let _gthis = this;
		this.getAdaptor().moveNode(this.realNode,oldSlot,newSlot,function() {
			return blok_adaptor_RealNodeHostTools_findNearestRealNode(_gthis);
		});
	}
	getRealNode() {
		if(this.realNode == null) {
			throw new blok_core_BlokComponentException("Failed assertion: realNode != null",this);
		}
		return this.realNode;
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_ui_TextComponent.componentType;
	}
	visitChildren(visitor) {
	}
	static node(value,key) {
		return new blok_ui_VComponent(blok_ui_TextComponent.componentType,{ value : value},function(node) {
			return new blok_ui_TextComponent(node);
		},key);
	}
}
blok_ui_TextComponent.__name__ = "blok.ui.TextComponent";
blok_ui_TextComponent.__interfaces__ = [blok_adaptor_RealNodeHost];
blok_ui_TextComponent.__super__ = blok_ui_ComponentBase;
Object.assign(blok_ui_TextComponent.prototype, {
	__class__: blok_ui_TextComponent
});
class blok_ui_VNode {
}
blok_ui_VNode.__name__ = "blok.ui.VNode";
blok_ui_VNode.__isInterface__ = true;
Object.assign(blok_ui_VNode.prototype, {
	__class__: blok_ui_VNode
});
class blok_ui_VComponent {
	constructor(type,props,factory,key) {
		this.type = type;
		this.key = key;
		this.props = props;
		this.factory = factory;
	}
	getProps() {
		return this.props;
	}
	createComponent() {
		return this.factory(this);
	}
}
blok_ui_VComponent.__name__ = "blok.ui.VComponent";
blok_ui_VComponent.__interfaces__ = [blok_ui_VNode];
Object.assign(blok_ui_VComponent.prototype, {
	__class__: blok_ui_VComponent
});
class blok_ui_VRealNode {
	constructor(type,tag,props,children,key) {
		this.type = type;
		this.tag = tag;
		this.props = props;
		this.children = children;
		this.key = key;
	}
	getProps() {
		return this.props;
	}
	createComponent() {
		return new blok_ui_RealNodeComponent(this);
	}
}
blok_ui_VRealNode.__name__ = "blok.ui.VRealNode";
blok_ui_VRealNode.__interfaces__ = [blok_ui_VNode];
Object.assign(blok_ui_VRealNode.prototype, {
	__class__: blok_ui_VRealNode
});
class ex_api_FooApi {
	constructor() {
	}
	getFoo(foo) {
		let request = new kit_http_Request("GET",kit_http_UrlObject.parse(["/api/get-foo"].concat([foo]).join("/")),[{ name : "accept", value : "application/json"}]);
		let handler = function(__data) {
			return __data.data;
		};
		return blok_bridge_client_Fetch_fetch(request).flatMap(function(result) {
			switch(result._hx_index) {
			case 0:
				return handler(result.value);
			case 1:
				return kit_Task.reject(result.error);
			}
		});
	}
	dispose() {
	}
	getContextId() {
		return ex_api_FooApi.__contextId;
	}
	static from(context) {
		return kit_MaybeTools.or(ex_api_FooApi.maybeFrom(context),new kit_SimpleLazyObject(function() {
			return new ex_api_FooApi();
		}));
	}
	static maybeFrom(context) {
		return kit_MaybeTools.flatMap(context.findAncestor(function(ancestor) {
			let _g = ((ancestor) instanceof blok_context_Provider) ? ancestor : null;
			if(_g == null) {
				return false;
			} else {
				let provider = _g;
				return provider.match(ex_api_FooApi.__contextId);
			}
		}),function(provider) {
			return provider.getContext();
		});
	}
}
ex_api_FooApi.__name__ = "ex.api.FooApi";
ex_api_FooApi.__interfaces__ = [blok_bridge_api_Api_$944da21c517df0c48dfbef7af28f3093];
Object.assign(ex_api_FooApi.prototype, {
	__class__: ex_api_FooApi
});
class ex_island_ApiAware extends blok_bridge_IslandComponent {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.__backing_foo = null;
		super._hx_constructor();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_str = blok_signal_Signal.ofValue(props.str);
		let prevOwner = blok_signal_Graph_setCurrentOwner(kit_Maybe.Some(this));
		try {
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g);
			blok_signal_Graph_setCurrentOwner(prevOwner);
			throw haxe_Exception.thrown(_g1);
		}
		blok_signal_Graph_setCurrentOwner(prevOwner);
	}
	__create_foo() {
		let _gthis = this;
		return blok_suspense_Resource._new(function() {
			return ex_api_FooApi.from(_gthis).getFoo(_gthis.get_str());
		});
	}
	render() {
		let tmp = blok_ui_Text.ofString(this.get_foo().get());
		return blok_html_Html.div({ },tmp);
	}
	get_str() {
		return this.__backing_str.get();
	}
	get_foo() {
		if(this.__backing_foo == null) {
			this.__backing_foo = this.__create_foo();
		}
		return this.__backing_foo;
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_str.set(props.str);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == ex_island_ApiAware.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(ex_island_ApiAware.componentType,props,function(node) {
			return new ex_island_ApiAware(node);
		},key);
	}
	static fromJson(data) {
		return ex_island_ApiAware.node({ str : Reflect.field(data,"str")});
	}
	static hydrateIslands(parent) {
		let elements = blok_bridge_IslandTools_getIslandElementsForComponent(ex_island_ApiAware.islandType);
		let _g = [];
		let _g1 = 0;
		while(_g1 < elements.length) {
			let el = elements[_g1];
			++_g1;
			let props = blok_bridge_IslandTools_getIslandProps(el);
			let comp = ex_island_ApiAware.fromJson(props).createComponent();
			let cursor = parent.getAdaptor().createCursor(el.firstChild);
			comp.hydrate(cursor,parent,null);
			_g.push(comp);
		}
		return _g;
	}
}
ex_island_ApiAware.__name__ = "ex.island.ApiAware";
ex_island_ApiAware.__super__ = blok_bridge_IslandComponent;
Object.assign(ex_island_ApiAware.prototype, {
	__class__: ex_island_ApiAware
});
class ex_island_Counter extends blok_bridge_IslandComponent {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.count = blok_signal_Signal.ofValue(props.count);
		let prevOwner = blok_signal_Graph_setCurrentOwner(kit_Maybe.Some(this));
		try {
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g);
			blok_signal_Graph_setCurrentOwner(prevOwner);
			throw haxe_Exception.thrown(_g1);
		}
		blok_signal_Graph_setCurrentOwner(prevOwner);
	}
	render() {
		let _gthis = this;
		let tmp = blok_ui_Text.ofString("Current count ");
		let _gthis1 = this.count;
		let tmp1 = blok_ui_Text.ofSignal(new blok_signal_ComputationObject(function() {
			return Std.string(_gthis1.get());
		},null));
		let tmp2 = blok_html_Html.span({ },tmp,tmp1);
		let this1 = new blok_signal_SignalObject(function(_) {
			_gthis.count.update(function(count) {
				return count + 1;
			});
		});
		return blok_html_Html.div({ },tmp2,blok_html_Html.button({ onClick : this1},blok_ui_Text.ofString("+")));
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.count.set(props.count);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == ex_island_Counter.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(ex_island_Counter.componentType,props,function(node) {
			return new ex_island_Counter(node);
		},key);
	}
	static fromJson(data) {
		return ex_island_Counter.node({ count : Reflect.field(data,"count")});
	}
	static hydrateIslands(parent) {
		let elements = blok_bridge_IslandTools_getIslandElementsForComponent(ex_island_Counter.islandType);
		let _g = [];
		let _g1 = 0;
		while(_g1 < elements.length) {
			let el = elements[_g1];
			++_g1;
			let props = blok_bridge_IslandTools_getIslandProps(el);
			let comp = ex_island_Counter.fromJson(props).createComponent();
			let cursor = parent.getAdaptor().createCursor(el.firstChild);
			comp.hydrate(cursor,parent,null);
			_g.push(comp);
		}
		return _g;
	}
}
ex_island_Counter.__name__ = "ex.island.Counter";
ex_island_Counter.__super__ = blok_bridge_IslandComponent;
Object.assign(ex_island_Counter.prototype, {
	__class__: ex_island_Counter
});
class haxe_Timer {
	constructor(time_ms) {
		let me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
	static delay(f,time_ms) {
		let t = new haxe_Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}
}
haxe_Timer.__name__ = "haxe.Timer";
Object.assign(haxe_Timer.prototype, {
	__class__: haxe_Timer
});
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
	unwrap() {
		return this.value;
	}
}
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
});
class haxe_ds_IntMap {
	constructor() {
		this.h = { };
	}
	get(key) {
		return this.h[key];
	}
	remove(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i];
		}};
	}
}
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_IntMap.prototype, {
	__class__: haxe_ds_IntMap
});
class haxe_ds__$List_ListNode {
	constructor(item,next) {
		this.item = item;
		this.next = next;
	}
}
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
Object.assign(haxe_ds__$List_ListNode.prototype, {
	__class__: haxe_ds__$List_ListNode
});
class haxe_ds__$List_ListIterator {
	constructor(head) {
		this.head = head;
	}
	hasNext() {
		return this.head != null;
	}
	next() {
		let val = this.head.item;
		this.head = this.head.next;
		return val;
	}
}
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
Object.assign(haxe_ds__$List_ListIterator.prototype, {
	__class__: haxe_ds__$List_ListIterator
});
class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
	set(key,value) {
		let id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	get(key) {
		return this.h[key.__id__];
	}
	remove(key) {
		let id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
}
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_ObjectMap.prototype, {
	__class__: haxe_ds_ObjectMap
});
class haxe_ds__$StringMap_StringMapKeyIterator {
	constructor(h) {
		this.h = h;
		this.keys = Object.keys(h);
		this.length = this.keys.length;
		this.current = 0;
	}
	hasNext() {
		return this.current < this.length;
	}
	next() {
		return this.keys[this.current++];
	}
}
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
Object.assign(haxe_ds__$StringMap_StringMapKeyIterator.prototype, {
	__class__: haxe_ds__$StringMap_StringMapKeyIterator
});
class haxe_ds__$StringMap_StringMapValueIterator {
	constructor(h) {
		this.h = h;
		this.keys = Object.keys(h);
		this.length = this.keys.length;
		this.current = 0;
	}
	hasNext() {
		return this.current < this.length;
	}
	next() {
		return this.h[this.keys[this.current++]];
	}
}
haxe_ds__$StringMap_StringMapValueIterator.__name__ = "haxe.ds._StringMap.StringMapValueIterator";
Object.assign(haxe_ds__$StringMap_StringMapValueIterator.prototype, {
	__class__: haxe_ds__$StringMap_StringMapValueIterator
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		let s = "";
		let b = this.b;
		let i = pos;
		let max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				let c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					let code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					let c2 = b[i++];
					let code = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else {
					let c2 = b[i++];
					let c3 = b[i++];
					let u = (c & 15) << 18 | (c2 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				let c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	toString() {
		return this.getString(0,this.length);
	}
	static ofData(b) {
		let hb = b.hxBytes;
		if(hb != null) {
			return hb;
		}
		return new haxe_io_Bytes(b);
	}
}
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
});
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let con = e.__constructs__[o._hx_index];
				let n = con._hx_name;
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		while(true) {
			if(cc == null) {
				return false;
			}
			if(cc == cl) {
				return true;
			}
			let intf = cc.__interfaces__;
			if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
				let _g = 0;
				let _g1 = intf.length;
				while(_g < _g1) {
					let i = _g++;
					let i1 = intf[i];
					if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
						return true;
					}
				}
			}
			cc = cc.__super__;
		}
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __implements(o,iface) {
		return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
	}
	static __cast(o,t) {
		if(o == null || js_Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = "js.Boot";
class kit_CancellableLink {
}
kit_CancellableLink.__name__ = "kit.CancellableLink";
kit_CancellableLink.__isInterface__ = true;
Object.assign(kit_CancellableLink.prototype, {
	__class__: kit_CancellableLink
});
class kit_Cancellable {
	static ofFunction(link) {
		return new kit_SimpleCancelableLink(link);
	}
}
class kit_SimpleCancelableLink {
	constructor(callback) {
		this.callback = callback;
	}
	cancel() {
		if(this.callback != null) {
			this.callback();
			this.callback = null;
		}
	}
}
kit_SimpleCancelableLink.__name__ = "kit.SimpleCancelableLink";
kit_SimpleCancelableLink.__interfaces__ = [kit_CancellableLink];
Object.assign(kit_SimpleCancelableLink.prototype, {
	__class__: kit_SimpleCancelableLink
});
class kit__$Error_ErrorObject extends haxe_Exception {
	constructor(errorCode,message) {
		super(message);
		this.errorCode = errorCode;
	}
}
kit__$Error_ErrorObject.__name__ = "kit._Error.ErrorObject";
kit__$Error_ErrorObject.__super__ = haxe_Exception;
Object.assign(kit__$Error_ErrorObject.prototype, {
	__class__: kit__$Error_ErrorObject
});
class kit_EventBase {
	constructor() {
		this.canceled = false;
		this.dispatching = false;
	}
	add(listener,once) {
		if(once == null) {
			once = false;
		}
		if(this.canceled) {
			throw haxe_Exception.thrown("Cannot add a listener to a canceled signal");
		}
		let sub = new kit_EventSubscription(this,listener,once);
		if(this.dispatching) {
			if(this.toAddHead == null) {
				this.toAddHead = this.toAddTail = sub;
			} else {
				this.toAddHead.next = sub;
				sub.previous = this.toAddTail;
				this.toAddTail = sub;
			}
		} else if(this.head == null) {
			this.head = this.tail = sub;
		} else {
			this.tail.next = sub;
			sub.previous = this.tail;
			this.tail = sub;
		}
		return sub;
	}
	cancel() {
		this.canceled = true;
		let sub = this.head;
		while(sub != null) {
			sub.signal = null;
			sub = sub.next;
		}
		this.head = null;
		this.tail = null;
		this.toAddHead = null;
		this.toAddTail = null;
	}
	remove(sub) {
		if(this.head == sub) {
			this.head = this.head.next;
		}
		if(this.tail == sub) {
			this.tail = this.tail.previous;
		}
		if(this.toAddHead == sub) {
			this.toAddHead = this.toAddHead.next;
		}
		if(this.toAddTail == sub) {
			this.toAddTail = this.toAddTail.previous;
		}
		if(sub.previous != null) {
			sub.previous.next = sub.next;
		}
		if(sub.next != null) {
			sub.next.previous = sub.previous;
		}
		sub.signal = null;
	}
}
kit_EventBase.__name__ = "kit.EventBase";
kit_EventBase.__interfaces__ = [kit_CancellableLink];
Object.assign(kit_EventBase.prototype, {
	__class__: kit_EventBase
});
class kit_EventSubscription {
	constructor(signal,listener,once) {
		this.signal = signal;
		this.listener = listener;
		this.once = once;
	}
	cancel() {
		if(this.signal != null) {
			this.signal.remove(this);
			this.signal = null;
		}
	}
}
kit_EventSubscription.__name__ = "kit.EventSubscription";
kit_EventSubscription.__interfaces__ = [kit_CancellableLink];
Object.assign(kit_EventSubscription.prototype, {
	__class__: kit_EventSubscription
});
class kit_Event_$0 extends kit_EventBase {
	constructor() {
		super();
	}
	dispatch() {
		this.dispatching = true;
		let sub = this.head;
		while(sub != null) {
			sub.listener();
			if(sub.once) {
				sub.cancel();
			}
			sub = sub.next;
		}
		this.dispatching = false;
		if(this.toAddHead != null) {
			if(this.head == null) {
				this.head = this.toAddHead;
				this.tail = this.toAddTail;
			} else {
				this.tail.next = this.toAddHead;
				this.toAddHead.previous = this.tail;
				this.tail = this.toAddTail;
			}
			this.toAddHead = this.toAddTail = null;
		}
	}
}
kit_Event_$0.__name__ = "kit.Event_0";
kit_Event_$0.__super__ = kit_EventBase;
Object.assign(kit_Event_$0.prototype, {
	__class__: kit_Event_$0
});
var kit__$Future_FutureState = $hxEnums["kit._Future.FutureState"] = { __ename__:true,__constructs__:null
	,Inactive: ($_=function(activator,handlers) { return {_hx_index:0,activator:activator,handlers:handlers,__enum__:"kit._Future.FutureState",toString:$estr}; },$_._hx_name="Inactive",$_.__params__ = ["activator","handlers"],$_)
	,Suspended: ($_=function(handlers) { return {_hx_index:1,handlers:handlers,__enum__:"kit._Future.FutureState",toString:$estr}; },$_._hx_name="Suspended",$_.__params__ = ["handlers"],$_)
	,Active: ($_=function(value) { return {_hx_index:2,value:value,__enum__:"kit._Future.FutureState",toString:$estr}; },$_._hx_name="Active",$_.__params__ = ["value"],$_)
};
kit__$Future_FutureState.__constructs__ = [kit__$Future_FutureState.Inactive,kit__$Future_FutureState.Suspended,kit__$Future_FutureState.Active];
class kit_Future {
	constructor(activator) {
		this.state = kit__$Future_FutureState.Inactive(activator,[]);
	}
	flatMap(transform) {
		let _gthis = this;
		return new kit_Future(function(activate) {
			_gthis.handle(function(value) {
				transform(value).handle(activate);
			});
		});
	}
	handle(handler) {
		let _g = this.state;
		switch(_g._hx_index) {
		case 0:
			this.state = kit__$Future_FutureState.Suspended(_g.handlers.concat([handler]));
			_g.activator($bind(this,this.activate));
			break;
		case 1:
			_g.handlers.push(handler);
			break;
		case 2:
			handler(_g.value);
			break;
		}
		let _gthis = this;
		return kit_Cancellable.ofFunction(function() {
			let _g = _gthis.state;
			switch(_g._hx_index) {
			case 0:
				HxOverrides.remove(_g.handlers,handler);
				break;
			case 1:
				HxOverrides.remove(_g.handlers,handler);
				break;
			default:
			}
		});
	}
	activate(value) {
		let _g = this.state;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.handlers;
			this.state = kit__$Future_FutureState.Active(value);
			let _g2 = 0;
			while(_g2 < _g1.length) {
				let handler = _g1[_g2];
				++_g2;
				handler(value);
			}
			break;
		case 1:
			let _g3 = _g.handlers;
			this.state = kit__$Future_FutureState.Active(value);
			let _g4 = 0;
			while(_g4 < _g3.length) {
				let handler = _g3[_g4];
				++_g4;
				handler(value);
			}
			break;
		case 2:
			throw new haxe_Exception("Attempted to activate a Future that was already activated");
		}
	}
}
kit_Future.__name__ = "kit.Future";
Object.assign(kit_Future.prototype, {
	__class__: kit_Future
});
class kit_SimpleLazyObject {
	constructor(resolve) {
		this.value = kit_Maybe.None;
		this.resolve = resolve;
	}
	get() {
		let _g = this.value;
		switch(_g._hx_index) {
		case 0:
			return _g.value;
		case 1:
			this.value = kit_Maybe.Some(this.resolve());
			return this.get();
		}
	}
}
kit_SimpleLazyObject.__name__ = "kit.SimpleLazyObject";
Object.assign(kit_SimpleLazyObject.prototype, {
	__class__: kit_SimpleLazyObject
});
class kit_MaybeTools {
	static unwrap(maybe) {
		switch(maybe._hx_index) {
		case 0:
			return maybe.value;
		case 1:
			return null;
		}
	}
	static map(maybe,transform) {
		switch(maybe._hx_index) {
		case 0:
			return kit_Maybe.Some(transform(maybe.value));
		case 1:
			return kit_Maybe.None;
		}
	}
	static flatMap(maybe,transform) {
		switch(maybe._hx_index) {
		case 0:
			return transform(maybe.value);
		case 1:
			return kit_Maybe.None;
		}
	}
	static or(maybe,value) {
		switch(maybe._hx_index) {
		case 0:
			return maybe.value;
		case 1:
			return value.get();
		}
	}
	static orThrow(maybe,message) {
		switch(maybe._hx_index) {
		case 0:
			return maybe.value;
		case 1:
			throw haxe_Exception.thrown(message == null ? "No value exists" : message);
		}
	}
}
kit_MaybeTools.__name__ = "kit.MaybeTools";
var kit_Result = $hxEnums["kit.Result"] = { __ename__:true,__constructs__:null
	,Ok: ($_=function(value) { return {_hx_index:0,value:value,__enum__:"kit.Result",toString:$estr}; },$_._hx_name="Ok",$_.__params__ = ["value"],$_)
	,Error: ($_=function(error) { return {_hx_index:1,error:error,__enum__:"kit.Result",toString:$estr}; },$_._hx_name="Error",$_.__params__ = ["error"],$_)
};
kit_Result.__constructs__ = [kit_Result.Ok,kit_Result.Error];
class kit_Task {
	static ofError(error) {
		return new kit_Future(function(activate) {
			activate(kit_Result.Error(error));
		});
	}
	static resolve(value) {
		return new kit_Future(function(activate) {
			activate(kit_Result.Ok(value));
		});
	}
	static reject(e) {
		return new kit_Future(function(activate) {
			activate(kit_Result.Error(e));
		});
	}
	static ofJsPromise(promise) {
		return new kit_Future(function(activate) {
			promise.then(function(value) {
				activate(kit_Result.Ok(value));
			},function(e) {
				if(((e) instanceof haxe_Exception)) {
					activate(kit_Result.Error(e));
				} else {
					activate(kit_Result.Error(new kit__$Error_ErrorObject(500,"Unknown error: " + Std.string(e))));
				}
			});
		});
	}
}
class kit_http_Headers {
	static _new(...fields) {
		return fields.slice();
	}
}
class kit_http_Message {
	constructor(headers,body) {
		this.headers = headers == null ? kit_http_Headers._new() : headers;
		this.body = body == null ? kit_Maybe.None : kit_Maybe.Some(body);
	}
}
kit_http_Message.__name__ = "kit.http.Message";
Object.assign(kit_http_Message.prototype, {
	__class__: kit_http_Message
});
class kit_http_Request extends kit_http_Message {
	constructor(method,url,headers,body) {
		super(headers,body);
		this.method = method;
		this.url = url;
	}
	withUrl(url) {
		return new kit_http_Request(this.method,url,this.headers,kit_MaybeTools.unwrap(this.body));
	}
}
kit_http_Request.__name__ = "kit.http.Request";
kit_http_Request.__super__ = kit_http_Message;
Object.assign(kit_http_Request.prototype, {
	__class__: kit_http_Request
});
class kit_http_Response extends kit_http_Message {
	constructor(status,headers,body) {
		super(headers,body);
		this.status = status;
	}
}
kit_http_Response.__name__ = "kit.http.Response";
kit_http_Response.__super__ = kit_http_Message;
Object.assign(kit_http_Response.prototype, {
	__class__: kit_http_Response
});
class kit_http_Url {
	static toString(this1) {
		return this1.toString();
	}
}
class kit_http_UrlObject {
	constructor(scheme,domain,path,fragment,query) {
		this.scheme = scheme;
		this.domain = domain;
		this.path = path;
		this.fragment = fragment;
		this.query = query;
	}
	withScheme(newScheme) {
		return new kit_http_UrlObject(newScheme,this.domain,this.path,this.fragment,this.query);
	}
	withDomain(newDomain) {
		return new kit_http_UrlObject(this.scheme,newDomain,this.path,this.fragment,this.query);
	}
	toString() {
		let buffer_b = "";
		if(this.scheme != null) {
			buffer_b = "" + Std.string(this.scheme);
			buffer_b += "://";
		}
		if(this.domain != null) {
			buffer_b += Std.string(this.domain);
		}
		if(this.path.length > 0) {
			if(!this.path.startsWith("/")) {
				buffer_b += "/";
			}
			buffer_b += Std.string(this.path);
		}
		let q = kit_http_UrlQuery.toString(this.query);
		if(q.length > 0) {
			buffer_b += "?";
			buffer_b += q == null ? "null" : "" + q;
		}
		if(this.fragment != null) {
			buffer_b += "#";
			buffer_b += Std.string(this.fragment);
		}
		return buffer_b;
	}
	static parse(url) {
		url = StringTools.trim(url);
		let scheme;
		let _g = url.indexOf("://");
		if(_g == -1) {
			scheme = null;
		} else {
			let part = url.substring(0,_g);
			url = HxOverrides.substr(url,_g + "://".length,null);
			scheme = part;
		}
		let domain;
		let _g1 = url.indexOf("/");
		if(_g1 == -1) {
			let _g = url.indexOf("?");
			domain = _g == -1 ? url : url.substring(0,_g);
		} else {
			domain = url.substring(0,_g1);
		}
		if(domain.length == 0) {
			domain = null;
		} else {
			url = HxOverrides.substr(url,domain.length,null);
		}
		let path = "";
		if(!url.startsWith("?")) {
			let _g = url.lastIndexOf("?");
			if(_g == -1) {
				let _g = url.indexOf("#");
				if(_g == -1) {
					path = url;
					url = "";
				} else {
					path = url.substring(0,_g);
					url = url.substring(_g);
				}
			} else {
				path = url.substring(0,_g);
				url = url.substring(_g);
			}
		}
		let fragment;
		let _g2 = url.indexOf("#");
		if(_g2 == -1) {
			fragment = null;
		} else {
			let part = url.substring(_g2 + 1);
			url = url.substring(0,_g2);
			fragment = part;
		}
		let query;
		let _g3 = url.indexOf("?");
		if(_g3 == -1) {
			query = kit_http_UrlQuery._new(new haxe_ds_StringMap());
		} else {
			let part = HxOverrides.substr(url,_g3 + 1,null);
			url = "";
			query = kit_http_UrlQuery.parse(part);
		}
		return new kit_http_UrlObject(scheme,domain,path,fragment,query);
	}
}
kit_http_UrlObject.__name__ = "kit.http.UrlObject";
Object.assign(kit_http_UrlObject.prototype, {
	__class__: kit_http_UrlObject
});
class kit_http_UrlQuery {
	static parse(query) {
		let params = new haxe_ds_StringMap();
		let parts = query.split("&");
		let _g = 0;
		while(_g < parts.length) {
			let param = parts[_g];
			++_g;
			let _g1 = param.split("=");
			if(_g1.length == 2) {
				let key = _g1[0];
				let value = _g1[1];
				let key1 = StringTools.trim(key);
				let s = StringTools.trim(value);
				let value1 = decodeURIComponent(s.split("+").join(" "));
				params.h[key1] = value1;
			} else {
				throw new haxe_Exception("Malformed url");
			}
		}
		return kit_http_UrlQuery._new(params);
	}
	static _new(params) {
		return params;
	}
	static toString(this1) {
		let _g = [];
		let h = this1.h;
		let _g_h = h;
		let _g_keys = Object.keys(h);
		let _g_length = _g_keys.length;
		let _g_current = 0;
		while(_g_current < _g_length) {
			let key = _g_keys[_g_current++];
			let _g_key = key;
			let _g_value = _g_h[key];
			let key1 = _g_key;
			let value = _g_value;
			_g.push("" + key1 + "=" + encodeURIComponent(value));
		}
		return _g.join("&");
	}
}
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
{
	Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
	String.__name__ = "String";
	Array.__name__ = "Array";
	var Int = { };
	var Dynamic = { };
	var Float = Number;
	var Bool = Boolean;
	var Class = { };
	var Enum = { };
}
js_Boot.__toStr = ({ }).toString;
blok_ui_ComponentBase._hx_skip_constructor = false;
var blok_bridge_client_Fetch_client = new kit_http_client_BrowserClient({ credentials : "include"});
kit_UniqueId.uid = 0;
blok_context_Provider.componentType = kit_UniqueId.uid++;
blok_core_Scheduler.hasRaf = typeof window != 'undefined' && 'requestAnimationFrame' in window;
var blok_html_TagCollection_tags = new haxe_ds_StringMap();
blok_html_Html.__componentType_button = blok_html_TagCollection_getTypeForTag("button");
blok_html_Html.__componentType_div = blok_html_TagCollection_getTypeForTag("div");
blok_html_Html.__componentType_span = blok_html_TagCollection_getTypeForTag("span");
blok_signal_Observer._hx_skip_constructor = false;
var blok_signal_Graph_currentOwner = kit_Maybe.None;
var blok_signal_Graph_currentConsumer = kit_Maybe.None;
var blok_signal_Graph_pending = new haxe_ds_List();
var blok_signal_Graph_depth = 0;
blok_suspense_SuspenseBoundary.componentType = kit_UniqueId.uid++;
blok_suspense_SuspenseBoundaryContext.__contextId = kit_UniqueId.uid++;
blok_ui_Placeholder.componentType = kit_UniqueId.uid++;
blok_ui_RootComponent.componentType = kit_UniqueId.uid++;
blok_ui_Scope.componentType = kit_UniqueId.uid++;
blok_ui_TextComponent.componentType = kit_UniqueId.uid++;
ex_api_FooApi.__contextId = kit_UniqueId.uid++;
ex_island_ApiAware.componentType = kit_UniqueId.uid++;
ex_island_ApiAware.islandType = "ex.island.ApiAware";
ex_island_Counter.componentType = kit_UniqueId.uid++;
ex_island_Counter.islandType = "ex.island.Counter";
Run_main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=index.js.map